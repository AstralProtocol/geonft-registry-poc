{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GeoNFT",
          "name": "_geoNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "GeoNFTRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "geojson",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_area",
          "type": "uint256"
        }
      ],
      "name": "GeoNFTTopologyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "GeoNFTUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GEOHASH_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_geohash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        }
      ],
      "name": "addToGeotree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "geoNFT",
      "outputs": [
        {
          "internalType": "contract GeoNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllGeoNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "geoNFTsArray",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_geohash",
          "type": "string"
        }
      ],
      "name": "getFromGeotree",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "_latitude",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "_longitude",
          "type": "int64"
        },
        {
          "internalType": "uint8",
          "name": "_precision",
          "type": "uint8"
        }
      ],
      "name": "queryGeoNFTsByLatLng",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "int64[2]",
          "name": "_centroid",
          "type": "int64[2]"
        }
      ],
      "name": "registerGeoNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_geohash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        }
      ],
      "name": "removeFromGeotree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unregisterGeoNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "int256[2][][]",
          "name": "_coordinates",
          "type": "int256[2][][]"
        },
        {
          "internalType": "int64[2]",
          "name": "_centroid",
          "type": "int64[2]"
        },
        {
          "internalType": "string",
          "name": "_geojson",
          "type": "string"
        }
      ],
      "name": "updateGeoNFTTopology",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_formergeohash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newgeohash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        }
      ],
      "name": "updateGeotree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a06aa9c8ff7c518f61bfbbf5ad4d17803e223665cf5752c3be6d1345273c5db",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2577750",
    "logsBloom": "0x
    "blockHash": "0x754311859fa99cc39b03813d33f7027bdb5e8198485e4653eb9903b483975a7f",
    "transactionHash": "0x6a06aa9c8ff7c518f61bfbbf5ad4d17803e223665cf5752c3be6d1345273c5db",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x6a06aa9c8ff7c518f61bfbbf5ad4d17803e223665cf5752c3be6d1345273c5db",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x754311859fa99cc39b03813d33f7027bdb5e8198485e4653eb9903b483975a7f"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "2577750",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "384cd3ee43feb2addba43d6a4e627cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GeoNFT\",\"name\":\"_geoNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GeoNFTRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"geojson\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"}],\"name\":\"GeoNFTTopologyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GeoNFTUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GEOHASH_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_geohash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"addToGeotree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geoNFT\",\"outputs\":[{\"internalType\":\"contract GeoNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGeoNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"geoNFTsArray\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_geohash\",\"type\":\"string\"}],\"name\":\"getFromGeotree\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_latitude\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"_longitude\",\"type\":\"int64\"},{\"internalType\":\"uint8\",\"name\":\"_precision\",\"type\":\"uint8\"}],\"name\":\"queryGeoNFTsByLatLng\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int64[2]\",\"name\":\"_centroid\",\"type\":\"int64[2]\"}],\"name\":\"registerGeoNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_geohash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"removeFromGeotree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unregisterGeoNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256[2][][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][][]\"},{\"internalType\":\"int64[2]\",\"name\":\"_centroid\",\"type\":\"int64[2]\"},{\"internalType\":\"string\",\"name\":\"_geojson\",\"type\":\"string\"}],\"name\":\"updateGeoNFTTopology\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_formergeohash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newgeohash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"updateGeotree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToGeotree(string,uint256)\":{\"params\":{\"_data\":\"the uint data\",\"_geohash\":\"the geohash\"}},\"getAllGeoNFTs()\":{\"returns\":{\"geoNFTsArray\":\"Array of all registered token IDs\"}},\"getFromGeotree(string)\":{\"params\":{\"_geohash\":\"the geohash\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"queryGeoNFTsByLatLng(int64,int64,uint8)\":{\"params\":{\"_latitude\":\"Latitude\",\"_longitude\":\"Longitude\",\"_precision\":\"Precision level of the geohash searching\"},\"returns\":{\"_0\":\"geoNFTsArray Array of all registered token IDs\"}},\"registerGeoNFT(uint256,int64[2])\":{\"params\":{\"_centroid\":\"Centroid of the polygon passed as [latitude, longitude]\",\"_tokenId\":\"the index of the GeoNFT to register\"}},\"removeFromGeotree(string,uint256)\":{\"params\":{\"_data\":\"the uint data\",\"_geohash\":\"geohash\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregisterGeoNFT(uint256)\":{\"params\":{\"_tokenId\":\"the index of the GeoNFT to unregister\"}},\"updateGeoNFTTopology(uint256,int256[2][][],int64[2],string)\":{\"params\":{\"_coordinates\":\"Array of polygon rings\",\"_geojson\":\"Strigified geojson of the new topology\",\"_tokenId\":\"The index of the GeoNFT to update\"}},\"updateGeotree(string,string,uint256)\":{\"params\":{\"_data\":\"the uint data\",\"_formergeohash\":\"the former geohash\",\"_newgeohash\":\"the new geohash\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToGeotree(string,uint256)\":{\"notice\":\"Add uint data by geohash to its relative subtree\"},\"constructor\":{\"notice\":\"Set up the Spatial Data Registry and prepopulate initial values\"},\"getAllGeoNFTs()\":{\"notice\":\"Return all the GeoNFT ids in the registry\"},\"getFromGeotree(string)\":{\"notice\":\"Get a data by geohash\"},\"queryGeoNFTsByLatLng(int64,int64,uint8)\":{\"notice\":\"Query registry by latitude, longitude and geohash depth level\"},\"registerGeoNFT(uint256,int64[2])\":{\"notice\":\"Register a GeoNFT in the Spatial Data Registry\"},\"removeFromGeotree(string,uint256)\":{\"notice\":\"Remove data from node with specified geohash\"},\"unregisterGeoNFT(uint256)\":{\"notice\":\"Unregister a GeoNFT from the Spatial Data Registry\"},\"updateGeoNFTTopology(uint256,int256[2][][],int64[2],string)\":{\"notice\":\"Update the topology of the GeoNFT\"},\"updateGeotree(string,string,uint256)\":{\"notice\":\"Update geohash\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SDRegistry.sol\":\"SDRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/GeoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract GeoNFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    ERC721Burnable,\\n    Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    struct EcologicalIndex {\\n        string indexType;\\n        int256 indexValue;\\n    }\\n\\n    // GeoNFT token properties\\n    mapping(uint256 => string) private geoJsons; // mapping of tokenId to geoJson\\n    mapping(uint256 => EcologicalIndex) private ecologicalIndexMap;\\n\\n    // solhint-disable-next-line no-empty-blocks, func-visibility\\n    constructor() ERC721(\\\"GEONFT Minter\\\", \\\"GEONFT\\\") {}\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function safeMint(\\n        address to,\\n        string memory uri,\\n        string memory _geoJson\\n    ) public {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n\\n        // set geoJson\\n        geoJsons[tokenId] = _geoJson;\\n\\n        // default index value to 0 type to area_m2\\n        // TODO?: Refactor to Struct to unify value and type?\\n        EcologicalIndex memory ecologicalIndex = EcologicalIndex(\\\"area_m2\\\", 0);\\n        ecologicalIndexMap[tokenId] = ecologicalIndex;\\n\\n        // indexValues[tokenId] = 0;\\n        // indexTypes[tokenId] = \\\"area_m2\\\";\\n\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    // Returns an array of tokenIds, URIs for an owner address\\n    function getTokensByOwner(address owner)\\n        public\\n        view\\n        returns (\\n            uint256[] memory,\\n            string[] memory,\\n            string[] memory\\n        )\\n    {\\n        // solhint-disable-next-line mark-callable-contracts\\n        uint256 totalTokensForOwner = ERC721.balanceOf(owner);\\n        uint256[] memory _tokenIds = new uint256[](totalTokensForOwner);\\n        string[] memory _uris = new string[](totalTokensForOwner);\\n        string[] memory _geoJsons = new string[](totalTokensForOwner);\\n        uint256 i;\\n\\n        for (i = 0; i < totalTokensForOwner; i++) {\\n            // solhint-disable-next-line mark-callable-contracts\\n            _tokenIds[i] = ERC721Enumerable.tokenOfOwnerByIndex(owner, i);\\n            _uris[i] = tokenURI(_tokenIds[i]);\\n            _geoJsons[i] = geoJsons[_tokenIds[i]];\\n        }\\n        return (_tokenIds, _uris, _geoJsons);\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory uri)\\n        external\\n        onlyOwner\\n    {\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    function setGeoJson(uint256 tokenId, string memory _geoJson)\\n        external\\n        onlyOwner\\n    {\\n        geoJsons[tokenId] = _geoJson;\\n    }\\n\\n    function getEcologicalIndex(uint256 _tokenId) public view returns (EcologicalIndex memory) {\\n        return ecologicalIndexMap[_tokenId];\\n    }\\n\\n    function setEcologicalIndex(\\n        uint256 _tokenId,\\n        string memory _indexType,\\n        int256 _indexValue\\n    ) external onlyOwner {\\n        EcologicalIndex storage ecologicalIndex =  ecologicalIndexMap[_tokenId];\\n        ecologicalIndex.indexType = _indexType;\\n        ecologicalIndex.indexValue = _indexValue;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function geoJson(uint256 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        string memory _geoJson = geoJsons[tokenId];\\n        return _geoJson;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb50fb1fdd9fcd94121ee600a63313d65b8df77f7c23f9341005ef8147dd2a43d\",\"license\":\"MIT\"},\"contracts/SDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { GeoNFT } from \\\"./GeoNFT.sol\\\";\\nimport { AreaCalculation } from \\\"../lib/AreaCalculation.sol\\\";\\nimport { GeohashUtils } from \\\"../lib/GeohashUtils.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\"; // Utils to slice array\\nimport \\\"hardhat/console.sol\\\"; // Import console.log\\n\\ncontract SDRegistry is ReentrancyGuard, Ownable {\\n    using BytesLib for bytes;\\n    // The GEONFT ERC721 token contract\\n    GeoNFT public geoNFT;\\n\\n    // length of the geohash string\\n    uint8 public constant GEOHASH_LENGTH = 8;\\n\\n    // Array of registered token IDs\\n    uint256[] private tokenArray;\\n\\n    struct Node {\\n        uint256[] data;\\n    }\\n\\n    mapping(string => Node) private geotree;\\n    mapping(uint256 => string) private tokenGeohash; // mapping of tokenId to geohash\\n\\n    /**\\n     * @notice Set up the Spatial Data Registry and prepopulate initial values\\n     */\\n    // solhint-disable-next-line func-visibility\\n    constructor(GeoNFT _geoNFT) {\\n        geoNFT = _geoNFT;\\n    }\\n\\n    event GeoNFTRegistered(uint256 tokenId);\\n    event GeoNFTUnregistered(uint256 tokenId);\\n    event GeoNFTTopologyUpdated(uint256 tokenId, string geojson, uint256 _area);\\n\\n    /**\\n     * @notice Register a GeoNFT in the Spatial Data Registry\\n     * @param _tokenId the index of the GeoNFT to register\\n     * @param _centroid Centroid of the polygon passed as [latitude, longitude]\\n     */\\n    function registerGeoNFT(\\n        uint256 _tokenId, \\n        int64[2] memory _centroid\\n    ) \\n        external \\n        onlyOwner\\n    {\\n        int64 lat = _centroid[0];\\n        int64 lon = _centroid[1];\\n\\n        addToTokenArray(_tokenId);\\n\\n        // solhint-disable-next-line mark-callable-contracts\\n        string memory geohash = GeohashUtils.encode(lat, lon, GEOHASH_LENGTH);\\n        addToGeotree(geohash, _tokenId);\\n        addToTokenGeohashMapping(_tokenId, geohash);\\n\\n        emit GeoNFTRegistered(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Unregister a GeoNFT from the Spatial Data Registry\\n     * @param _tokenId the index of the GeoNFT to unregister\\n    */\\n    function unregisterGeoNFT(uint256 _tokenId)\\n        external \\n        onlyOwner \\n    { \\n        string memory geohash = tokenGeohash[_tokenId];\\n        removeFromAllGeotreeSubhashes(geohash, _tokenId);\\n\\n        // Remove token ID from the global token array\\n        if (tokenArray.length == 1) {\\n            tokenArray.pop();\\n        } else {\\n            uint256[] memory newData = new uint256[](tokenArray.length - 1);\\n            uint256 counter = 0;\\n            for (uint256 i = 0; i < tokenArray.length - 1; i++) {\\n                if (tokenArray[i] != _tokenId) {\\n                    newData[counter] = tokenArray[i];\\n                    counter++;\\n                }\\n            }\\n        }\\n\\n        emit GeoNFTUnregistered(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Update the topology of the GeoNFT\\n     * @param _tokenId The index of the GeoNFT to update\\n     * @param _coordinates Array of polygon rings\\n     * @param _geojson Strigified geojson of the new topology\\n     */\\n    function updateGeoNFTTopology(\\n        uint256 _tokenId, \\n        int256[2][][] memory _coordinates,\\n        int64[2] memory _centroid,\\n        string memory _geojson\\n    ) \\n        external \\n        onlyOwner     \\n    {\\n        // solhint-disable-next-line mark-callable-contracts\\n        uint256 _area = AreaCalculation.polygonArea(_coordinates);\\n\\n        // Update GeoTree if geohash is different\\n        int64 lat = _centroid[0];\\n        int64 lon = _centroid[1];\\n        string memory formerGeohash = tokenGeohash[_tokenId];\\n        // solhint-disable-next-line mark-callable-contracts\\n        string memory newGeohash = GeohashUtils.encode(lat, lon, GEOHASH_LENGTH);\\n        bool geohashIsTheSame = areEqualStrings(formerGeohash, newGeohash);\\n\\n        if (!geohashIsTheSame) {\\n            removeFromAllGeotreeSubhashes(newGeohash, _tokenId);\\n            addToGeotree(newGeohash, _tokenId);\\n            tokenGeohash[_tokenId] = newGeohash;\\n        }\\n\\n        emit GeoNFTTopologyUpdated(_tokenId, _geojson, _area);\\n    }\\n\\n    /**\\n     * @notice Return all the GeoNFT ids in the registry\\n     * @return geoNFTsArray Array of all registered token IDs\\n     */\\n    function getAllGeoNFTs() public view returns (uint256[] memory geoNFTsArray) { \\n        return tokenArray;\\n    }\\n\\n    /**\\n     * @notice Query registry by latitude, longitude and geohash depth level\\n     * @param _latitude Latitude\\n     * @param _longitude Longitude\\n     * @param _precision Precision level of the geohash searching\\n     * @return geoNFTsArray Array of all registered token IDs\\n     */\\n    function queryGeoNFTsByLatLng(       \\n        int64 _latitude,       \\n        int64 _longitude,\\n        uint8 _precision\\n    )\\n        public\\n        view\\n        returns (\\n            uint256[] memory\\n        )\\n    {\\n        // solhint-disable-next-line mark-callable-contracts\\n        string memory geohash = GeohashUtils.encode(_latitude, _longitude, _precision);\\n        return getFromGeotree(geohash);\\n    }\\n\\n    /**\\n     * @notice Add token ID to the general token array\\n     * @param _tokenId Token ID\\n     */\\n    function addToTokenArray(uint256 _tokenId) private {\\n        tokenArray.push(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Add token ID to the global token array\\n     * @param _tokenId Token ID\\n     */\\n    function addToTokenGeohashMapping(uint256 _tokenId, string memory _geohash) private {\\n        tokenGeohash[_tokenId] = _geohash;\\n    }\\n\\n    /**\\n     * @notice Add uint data by geohash to its relative subtree\\n     * @param _geohash the geohash\\n     * @param _data the uint data\\n     */\\n    function addToGeotree(string memory _geohash, uint256 _data) public {\\n        // require the length of the _geohash is GEOHASH_LENGTH\\n        require(bytes(_geohash).length == GEOHASH_LENGTH);\\n\\n        // geohash characters splitted into an array\\n        bytes memory geohashArray = bytes(_geohash);\\n        // geohash substring used each level of the subtree\\n        // string memory subhash;\\n\\n        // iterates over all 8 levels of the geohash and insert/append data\\n        // to each of those levels indexed by its subhash\\n        for (uint8 i = 0; i < geohashArray.length; i++) {\\n            // create subhash according to the depth level by slicing original geohash;\\n            // subhash of 'gc7j98fg' at level 3 would be -> 'gc7';\\n            // solhint-disable-next-line\\n            string memory subhash = string(geohashArray.slice(0, i + 1));\\n\\n            // lookup existing node\\n            Node storage node = geotree[subhash];\\n\\n            // check if data is in node\\n            bool isInNode = dataExistsInNode(node, _data);\\n\\n            // if data already in node, continue\\n            if (isInNode) {\\n                console.log(\\\"Data already in the node\\\");\\n                continue;\\n            }\\n            // if node does not exist, create it\\n            if (node.data.length == 0) {\\n                node.data = new uint256[](1);\\n                node.data[0] = _data;\\n                geotree[subhash] = node;\\n            } else {\\n                // if node exists, add data to it\\n                uint256[] memory newData = new uint256[](node.data.length + 1);\\n                for (uint256 j = 0; j < node.data.length; j++) {\\n                    newData[j] = node.data[j];\\n                }\\n                newData[node.data.length] = _data;\\n                node.data = newData;\\n                geotree[subhash] = node;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get a data by geohash\\n     * @param _geohash the geohash\\n     */\\n    function getFromGeotree(string memory _geohash)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        Node storage node = geotree[_geohash];\\n        return node.data;\\n    }\\n\\n    /**\\n     * @notice Update geohash\\n     * @param _formergeohash the former geohash\\n     * @param _newgeohash the new geohash\\n     * @param _data the uint data\\n     */\\n    function updateGeotree(\\n        string memory _formergeohash,\\n        string calldata _newgeohash,\\n        uint256 _data\\n    ) public {\\n        // remove data from former geohash\\n        removeFromGeotree(_formergeohash, _data);\\n\\n        // add data to new node\\n        addToGeotree(_newgeohash, _data);\\n    }\\n\\n    /**\\n     * @notice Remove data from node with specified geohash\\n     * @param _geohash geohash\\n     * @param _data the uint data\\n     */\\n    function removeFromGeotree(string memory _geohash, uint256 _data) public {\\n        // lookup existing node\\n        Node storage node = geotree[_geohash];\\n\\n        // check if data is in node\\n        bool isInNode = dataExistsInNode(node, _data);\\n\\n        // if data wasn't in node, return\\n        if (!isInNode) {\\n            console.log(\\\"Data not in node\\\");\\n            return;\\n        }\\n\\n        // if node contains only one value, delete node\\n        if (node.data.length == 1) {\\n            delete geotree[_geohash];\\n        } else {\\n            // if node contains more than one value, rebuild data array\\n            uint256[] memory newData = new uint256[](node.data.length - 1);\\n            uint256 counter = 0;\\n            for (uint256 i = 0; i < node.data.length - 1; i++) {\\n                if (node.data[i] != _data) {\\n                    newData[counter] = node.data[i];\\n                    counter++;\\n                }\\n            }\\n            node.data = newData;\\n            geotree[_geohash] = node;\\n        }\\n    }\\n\\n    function removeFromAllGeotreeSubhashes(string memory _geohash, uint256 _tokenId) private {\\n        // geohash characters splitted into an array\\n        bytes memory geohashArray = bytes(_geohash);\\n        // require the length of the _geohash is GEOHASH_LENGTH\\n        require(geohashArray.length == GEOHASH_LENGTH);\\n\\n        for (uint8 i = 0; i < geohashArray.length; i++) {\\n            // create subhash at each depth level from 0 to GEOHASH_LENGTH by slicing original geohash;\\n            // subhash of 'gc7j98fg' at level 3 would be -> 'gc7';\\n            string memory subhash = string(geohashArray.slice(0, i + 1));\\n            removeFromGeotree(subhash, _tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if data in node\\n     * @param _node node\\n     * @param _data the uint data\\n     */\\n    function dataExistsInNode(Node memory _node, uint256 _data)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _node.data.length; i++) {\\n            if (_node.data[i] == _data) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function areEqualStrings(string memory _string1, string memory _string2) private pure returns (bool) {\\n        return keccak256(abi.encodePacked(_string1)) == keccak256(abi.encodePacked(_string2));\\n    }\\n}\",\"keccak256\":\"0x54e740ad6b7f15d91bce45c7e1a3353af8e9382024c15534c516d511b208bd88\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"lib/AreaCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { Trigonometry } from \\\"../lib/Trigonometry.sol\\\";\\n\\n\\nlibrary AreaCalculation {\\n    // Multiplications exponents to avoid decimals\\n    int256 private constant RAD_EXP = 1e9; // Radians exponent\\n    int256 private constant SIN_EXP = 1e9; // Sine exponent\\n    int256 private constant COORD_EXP = 1e9; // Coordinates exponent\\n    int256 private constant PI_EXP = 1e9; // Pi exponent\\n\\n    // Other constants\\n    int256 private constant PI = 3141592653;\\n    int256 private constant EARTH_RADIUS = 6371008; // m\\n\\n    /**\\n     * @notice Calculate the area of a multi polygon coordinates\\n     * @param _coordinates Big Number integer coordinates of a multi polygon\\n     * @return Area measured in square meters\\n    */\\n    function multiPolygonArea(int256[2][][][] memory _coordinates) public pure returns (uint256) {\\n        uint256 total = 0;\\n\\n        for (uint256 i = 0; i < _coordinates.length; i++) {\\n            total += polygonArea(_coordinates[i]);\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Calculate the area of a single polygon coordinates\\n     * @param _coordinates Big Number integer coordinates of a single polygon - an array of rings\\n     * @return Area measured in square meters\\n    */\\n    function polygonArea (int256[2][][] memory _coordinates) public pure returns (uint256) {\\n        int256 total = 0;\\n\\n        if (_coordinates.length > 0) {\\n            total += abs(ringArea(_coordinates[0]));\\n\\n            for (uint256 i = 1; i < _coordinates.length; i++) {\\n                total -= abs(ringArea(_coordinates[i]));\\n            }\\n        }\\n        return uint256(total);\\n    }\\n\\n    /**\\n     * @notice Calculate the area of a coordinates ring (a polygon single part).\\n        Obtained from Turf.js area function\\n        (https://github.com/Turfjs/turf/blob/master/packages/turf-area/index.ts)\\n     * @param _coordinates Big Number integer coordinates of a single polygon ring\\n     * @return Area measured in square meters\\n    */\\n    function ringArea(int256[2][] memory _coordinates) private pure returns (int256) {\\n        bool isValidPolygon = isPolygon(_coordinates);\\n        require(isValidPolygon == true, \\\"The coordinates are invalid\\\");\\n\\n        uint256 coordsLength = _coordinates.length;\\n        int256[2] memory p1;\\n        int256[2] memory p2;\\n        int256[2] memory p3;\\n        uint256 lowerIndex;\\n        uint256 middleIndex;\\n        uint256 upperIndex;\\n        int256 total = 0;\\n\\n        if (coordsLength > 2) {\\n            for (uint256 i = 0; i < coordsLength; i++) {\\n                if (i == coordsLength - 2) {\\n                    // i = N-2\\n                    lowerIndex = coordsLength - 2;\\n                    middleIndex = coordsLength - 1;\\n                    upperIndex = 0;\\n                } else if (i == coordsLength - 1) {\\n                    // i = N-1\\n                    lowerIndex = coordsLength - 1;\\n                    middleIndex = 0;\\n                    upperIndex = 1;\\n                } else {\\n                    // i = 0 to N-3\\n                    lowerIndex = i;\\n                    middleIndex = i + 1;\\n                    upperIndex = i + 2;\\n                }\\n                p1 = _coordinates[lowerIndex];\\n                p2 = _coordinates[middleIndex];\\n                p3 = _coordinates[upperIndex];\\n\\n                int256 v1 = nanoRad(p3[0]);\\n                int256 v2 = nanoRad(p1[0]);\\n                int256 v3 = nanoSin(p2[1]);\\n\\n                int256 subTotal = (v1 - v2) * v3;\\n                total += subTotal;\\n            }\\n\\n            // Must divide by all exponents applied before\\n            total = total * EARTH_RADIUS**2 / (2 * RAD_EXP * SIN_EXP * PI_EXP * COORD_EXP);\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Calculate nano radians (radians * 10^9) of a certain degree angle.\\n     * @param _angle Degree angle (0-360\\u00ba)\\n     * @return Nano radians\\n    */\\n    function nanoRad(int256 _angle) private pure returns (int256) {\\n        return (_angle * PI * RAD_EXP) / (180);\\n    }\\n\\n    /**\\n     * @notice Calculate nano sine (sine * 10^9) of a certain degree angle.\\n        The sine of an angle is given in a range [-1, 1]. The argument of the sine function \\n        is usually radians, which exists in a range [0, 2\\u03c0 rad]. Since this is not possible in \\n        Solidity, the following function returns the angle in 'nano' units (sine * 10^9). To do \\n        so, the sine is calculated using integer values. Instead of using a circle divided \\n        in 360 angle units (degrees), it assumes a circle divided in 1073741824 angle units (tAngle).\\n        To convert from degrees to tAngle units we need to do the following:\\n            tAngle = (degrees * 1073741824) / 360;\\n        The returning value exists on a range [-2147483647, 2147483647] (signed 32-bit). Therefore, to \\n        finally get the sine value, we need to divide the sin() function by 2147483647;\\n     * @param _angle Degree angle (0-360\\u00ba)\\n     * @return Nano sine\\n    */\\n    function nanoSin(int256 _angle) private pure returns (int256) {\\n        int256 angleUnits = 1073741824;\\n        int256 maxAngle = 2147483647;\\n        int256 tAngle = (_angle * angleUnits) / (360 * COORD_EXP);\\n        return Trigonometry.sin(uint256(tAngle)) * int(SIN_EXP) / maxAngle;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the input\\n     * @param _value Input integer value\\n     * @return Absolute input value\\n    */\\n    function abs(int256 _value) private pure returns (int256) {\\n        return _value >= 0\\n            ? _value\\n            : -_value;\\n    }\\n\\n    /**\\n     * @notice Checks to make sure first and last coordinates are the same\\n     * @param _coordinates Polygon ring\\n     * @return Boolean whether the coordinates represents a closed polygon or not\\n    */\\n    function isPolygon (int256[2][] memory _coordinates) public pure returns (bool) {\\n        uint256 length = _coordinates.length;\\n        if (length > 2) {\\n            // Coordinates of first coordinate of polygon\\n            int256 firstLat = _coordinates[0][0];\\n            int256 firstLon = _coordinates[0][1];\\n            // Coordinates of last coordinate of polygon\\n            int256 lastLat = _coordinates[length - 1][0];\\n            int256 lastLon = _coordinates[length - 1][1];\\n\\n            return (firstLat == lastLat && firstLon == lastLon);\\n        }\\n\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x6c0ba131a82a85ff74888ba688ebecce2f65af0ce4235e3f249df91735ecee87\",\"license\":\"MIT\"},\"lib/GeohashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// import console.log\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary GeohashUtils {\\n    // length of the geohash string\\n    uint256 private constant COORD_EXP = 1e9; // Coordinates exponent to avoid decimals\\n    int64 private constant MIN_LAT = -90 * int64(int256(COORD_EXP));\\n    int64 private constant MAX_LAT = 90 * int64(int256(COORD_EXP));\\n    int64 private constant MIN_LON = -180 * int64(int256(COORD_EXP));\\n    int64 private constant MAX_LON = 180 * int64(int256(COORD_EXP));\\n    string private constant GEOHASH_CODES = \\\"0123456789bcdefghjkmnpqrstuvwxyz\\\"; // Codes for geohash encoding\\n    bytes private constant CODES_BYTES = bytes(GEOHASH_CODES); // Codes in bytes format to iterate as array\\n\\n    struct Node {\\n        uint256[] data;\\n    }\\n\\n    /**\\n     * @notice Encode point into geohash (more of geohash: https://en.wikipedia.org/wiki/Geohash).\\n     *     Obtained from the node geohash package (ngeohash): https://github.com/sunng87/node-geohash\\n     * @param _lat latitude\\n     * @param _lon longitude\\n     * @param _precision geohash length precision\\n     * @return Geohash string with the same length as the _precision value (1-9)\\n     */\\n    function encode(\\n        int64 _lat,\\n        int64 _lon,\\n        uint8 _precision\\n    ) public pure returns (string memory) {\\n        bytes memory hashBytes = new bytes(_precision);\\n        int8 bits = 0;\\n        int8 bitsTotal = 0;\\n        int8 hashValue = 0;\\n        int64 maxLat = MAX_LAT;\\n        int64 minLat = MIN_LAT;\\n        int64 maxLon = MAX_LON;\\n        int64 minLon = MIN_LON;\\n        int64 mid;\\n        uint8 counter;\\n\\n        while (counter < _precision) {\\n            if (bitsTotal % 2 == 0) {\\n                mid = (maxLon + minLon) / 2;\\n\\n                if (_lon > mid) {\\n                    hashValue = (hashValue << 1) + 1;\\n                    minLon = mid;\\n                } else {\\n                    hashValue = (hashValue << 1) + 0;\\n                    maxLon = mid;\\n                }\\n            } else {\\n                mid = (maxLat + minLat) / 2;\\n\\n                if (_lat > mid) {\\n                    hashValue = (hashValue << 1) + 1;\\n                    minLat = mid;\\n                } else {\\n                    hashValue = (hashValue << 1) + 0;\\n                    maxLat = mid;\\n                }\\n            }\\n\\n            bits++;\\n            bitsTotal++;\\n\\n            if (bits == 5) {\\n                bytes1 charByte = CODES_BYTES[uint8(hashValue)];\\n                hashBytes[counter] = charByte;\\n                bits = 0;\\n                hashValue = 0;\\n                counter++;\\n            }\\n        }\\n\\n        return string(hashBytes);\\n    }\\n\\n    /**\\n     * @notice Decode a geohash of any given length to a pair of coordinates\\n     *     Obtained from the node geohash package (ngeohash): https://github.com/sunng87/node-geohash\\n     * @param _geohash Geohash string up to 9 characters of precision\\n     * @return Array of Big Number integer coordinates (lat, lon)\\n     */\\n    function decode(string memory _geohash)\\n        public\\n        pure\\n        returns (int64[2] memory)\\n    {\\n        int64[4] memory bbox = decodeBbox(_geohash);\\n        int64 minLat = bbox[0];\\n        int64 minLon = bbox[1];\\n        int64 maxLat = bbox[2];\\n        int64 maxLon = bbox[3];\\n        // Get center value of bounding box\\n        int64 lat = (minLat + maxLat) / 2; // Latitude middle point\\n        int64 lon = (minLon + maxLon) / 2; // Longitude middle point\\n\\n        return [lat, lon];\\n    }\\n\\n    /**\\n     * @notice Decode the bounding box of a given geohash\\n     *     Obtained from the node geohash package (ngeohash): https://github.com/sunng87/node-geohash\\n     * @param _geohash Geohash string up to 9 characters of precision\\n     * @return Array of Big Number integer coordinates representing the \\n        bounding box (lower left point, upper right point)\\n     */\\n    function decodeBbox(string memory _geohash)\\n        private\\n        pure\\n        returns (int64[4] memory)\\n    {\\n        bool isLon = true;\\n        int64 maxLat = MAX_LAT;\\n        int64 minLat = MIN_LAT;\\n        int64 maxLon = MAX_LON;\\n        int64 minLon = MIN_LON;\\n        int64 mid;\\n        uint8 hashValue;\\n\\n        for (uint8 i = 0; i < bytes(_geohash).length; i++) {\\n            string memory code = string(abi.encodePacked(bytes(_geohash)[i]));\\n            hashValue = uint8(indexOf(GEOHASH_CODES, code));\\n            require(hashValue >= 0);\\n\\n            for (uint8 bits = 5; bits > 0; bits--) {\\n                uint8 bit = (hashValue >> (bits - 1)) & 1;\\n\\n                if (isLon) {\\n                    mid = (maxLon + minLon) / 2;\\n\\n                    bit == 1\\n                        ? minLon = mid\\n                        : maxLon = mid;\\n                } else {\\n                    mid = (maxLat + minLat) / 2;\\n\\n                    bit == 1\\n                        ? minLat = mid\\n                        : maxLat = mid;\\n                }\\n                \\n                isLon = !isLon;\\n            }\\n        }\\n        return [minLat, minLon, maxLat, maxLon];\\n    }\\n\\n    function indexOf(string memory _string, string memory _char)\\n        internal\\n        pure\\n        returns (int8) \\n    {\\n        bytes memory _baseBytes = bytes(_string);\\n        bytes memory _valueBytes = bytes(_char);\\n\\n        assert(_valueBytes.length == 1);\\n\\n        for (uint8 i = 0; i < _baseBytes.length; i++) {\\n            if (_baseBytes[i] == _valueBytes[0]) {\\n                return int8(i);\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}\\n\",\"keccak256\":\"0x3188c7eb948a3d01a76ed4315c8bed613ca74578a67d1d42aa0477bccd796982\",\"license\":\"MIT\"},\"lib/Trigonometry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * SPDX-Licenses-Identifier: MIT\\n * Basic trigonometry functions\\n *\\n * Based on the Trigonometry Library by Lefteris Karapetsas:\\n * https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol\\n * \\n * This version implements a 32-bit lookup tables instead of a 16-bit. This\\n * allows accurate topological operations on small areas with very close coordinates.\\n *\\n * @author Daniel Serrano\\n */\\n\\nlibrary Trigonometry {\\n\\n    // Table index into the trigonometric table\\n    uint constant INDEX_WIDTH = 8;\\n    // Interpolation between successive entries in the tables\\n    uint constant INTERP_WIDTH = 16;\\n    uint constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n    uint constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\\n    uint constant SINE_TABLE_SIZE = 256;\\n\\n    // constant sine lookup table generated by gen_tables.py\\n    // We have no other choice but this since constant arrays don't yet exist\\n    uint8 constant ENTRY_BYTES = 4;\\n    bytes constant SIN_TABLE = \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xc9\\\\x0f\\\\x88\\\\x01\\\\x92\\\\x1d\\\\x20\\\\x02\\\\x5b\\\\x26\\\\xd7\\\\x03\\\\x24\\\\x2a\\\\xbf\\\\x03\\\\xed\\\\x26\\\\xe6\\\\x04\\\\xb6\\\\x19\\\\x5d\\\\x05\\\\x7f\\\\x00\\\\x35\\\\x06\\\\x47\\\\xd9\\\\x7c\\\\x07\\\\x10\\\\xa3\\\\x45\\\\x07\\\\xd9\\\\x5b\\\\x9e\\\\x08\\\\xa2\\\\x00\\\\x9a\\\\x09\\\\x6a\\\\x90\\\\x49\\\\x0a\\\\x33\\\\x08\\\\xbc\\\\x0a\\\\xfb\\\\x68\\\\x05\\\\x0b\\\\xc3\\\\xac\\\\x35\\\\x0c\\\\x8b\\\\xd3\\\\x5e\\\\x0d\\\\x53\\\\xdb\\\\x92\\\\x0e\\\\x1b\\\\xc2\\\\xe4\\\\x0e\\\\xe3\\\\x87\\\\x66\\\\x0f\\\\xab\\\\x27\\\\x2b\\\\x10\\\\x72\\\\xa0\\\\x48\\\\x11\\\\x39\\\\xf0\\\\xcf\\\\x12\\\\x01\\\\x16\\\\xd5\\\\x12\\\\xc8\\\\x10\\\\x6e\\\\x13\\\\x8e\\\\xdb\\\\xb1\\\\x14\\\\x55\\\\x76\\\\xb1\\\\x15\\\\x1b\\\\xdf\\\\x85\\\\x15\\\\xe2\\\\x14\\\\x44\\\\x16\\\\xa8\\\\x13\\\\x05\\\\x17\\\\x6d\\\\xd9\\\\xde\\\\x18\\\\x33\\\\x66\\\\xe8\\\\x18\\\\xf8\\\\xb8\\\\x3c\\\\x19\\\\xbd\\\\xcb\\\\xf3\\\\x1a\\\\x82\\\\xa0\\\\x25\\\\x1b\\\\x47\\\\x32\\\\xef\\\\x1c\\\\x0b\\\\x82\\\\x6a\\\\x1c\\\\xcf\\\\x8c\\\\xb3\\\\x1d\\\\x93\\\\x4f\\\\xe5\\\\x1e\\\\x56\\\\xca\\\\x1e\\\\x1f\\\\x19\\\\xf9\\\\x7b\\\\x1f\\\\xdc\\\\xdc\\\\x1b\\\\x20\\\\x9f\\\\x70\\\\x1c\\\\x21\\\\x61\\\\xb3\\\\x9f\\\\x22\\\\x23\\\\xa4\\\\xc5\\\\x22\\\\xe5\\\\x41\\\\xaf\\\\x23\\\\xa6\\\\x88\\\\x7e\\\\x24\\\\x67\\\\x77\\\\x57\\\\x25\\\\x28\\\\x0c\\\\x5d\\\\x25\\\\xe8\\\\x45\\\\xb6\\\\x26\\\\xa8\\\\x21\\\\x85\\\\x27\\\\x67\\\\x9d\\\\xf4\\\\x28\\\\x26\\\\xb9\\\\x28\\\\x28\\\\xe5\\\\x71\\\\x4a\\\\x29\\\\xa3\\\\xc4\\\\x85\\\\x2a\\\\x61\\\\xb1\\\\x01\\\\x2b\\\\x1f\\\\x34\\\\xeb\\\\x2b\\\\xdc\\\\x4e\\\\x6f\\\\x2c\\\\x98\\\\xfb\\\\xba\\\\x2d\\\\x55\\\\x3a\\\\xfb\\\\x2e\\\\x11\\\\x0a\\\\x62\\\\x2e\\\\xcc\\\\x68\\\\x1e\\\\x2f\\\\x87\\\\x52\\\\x62\\\\x30\\\\x41\\\\xc7\\\\x60\\\\x30\\\\xfb\\\\xc5\\\\x4d\\\\x31\\\\xb5\\\\x4a\\\\x5d\\\\x32\\\\x6e\\\\x54\\\\xc7\\\\x33\\\\x26\\\\xe2\\\\xc2\\\\x33\\\\xde\\\\xf2\\\\x87\\\\x34\\\\x96\\\\x82\\\\x4f\\\\x35\\\\x4d\\\\x90\\\\x56\\\\x36\\\\x04\\\\x1a\\\\xd9\\\\x36\\\\xba\\\\x20\\\\x13\\\\x37\\\\x6f\\\\x9e\\\\x46\\\\x38\\\\x24\\\\x93\\\\xb0\\\\x38\\\\xd8\\\\xfe\\\\x93\\\\x39\\\\x8c\\\\xdd\\\\x32\\\\x3a\\\\x40\\\\x2d\\\\xd1\\\\x3a\\\\xf2\\\\xee\\\\xb7\\\\x3b\\\\xa5\\\\x1e\\\\x29\\\\x3c\\\\x56\\\\xba\\\\x70\\\\x3d\\\\x07\\\\xc1\\\\xd5\\\\x3d\\\\xb8\\\\x32\\\\xa5\\\\x3e\\\\x68\\\\x0b\\\\x2c\\\\x3f\\\\x17\\\\x49\\\\xb7\\\\x3f\\\\xc5\\\\xec\\\\x97\\\\x40\\\\x73\\\\xf2\\\\x1d\\\\x41\\\\x21\\\\x58\\\\x9a\\\\x41\\\\xce\\\\x1e\\\\x64\\\\x42\\\\x7a\\\\x41\\\\xd0\\\\x43\\\\x25\\\\xc1\\\\x35\\\\x43\\\\xd0\\\\x9a\\\\xec\\\\x44\\\\x7a\\\\xcd\\\\x50\\\\x45\\\\x24\\\\x56\\\\xbc\\\\x45\\\\xcd\\\\x35\\\\x8f\\\\x46\\\\x75\\\\x68\\\\x27\\\\x47\\\\x1c\\\\xec\\\\xe6\\\\x47\\\\xc3\\\\xc2\\\\x2e\\\\x48\\\\x69\\\\xe6\\\\x64\\\\x49\\\\x0f\\\\x57\\\\xee\\\\x49\\\\xb4\\\\x15\\\\x33\\\\x4a\\\\x58\\\\x1c\\\\x9d\\\\x4a\\\\xfb\\\\x6c\\\\x97\\\\x4b\\\\x9e\\\\x03\\\\x8f\\\\x4c\\\\x3f\\\\xdf\\\\xf3\\\\x4c\\\\xe1\\\\x00\\\\x34\\\\x4d\\\\x81\\\\x62\\\\xc3\\\\x4e\\\\x21\\\\x06\\\\x17\\\\x4e\\\\xbf\\\\xe8\\\\xa4\\\\x4f\\\\x5e\\\\x08\\\\xe2\\\\x4f\\\\xfb\\\\x65\\\\x4c\\\\x50\\\\x97\\\\xfc\\\\x5e\\\\x51\\\\x33\\\\xcc\\\\x94\\\\x51\\\\xce\\\\xd4\\\\x6e\\\\x52\\\\x69\\\\x12\\\\x6e\\\\x53\\\\x02\\\\x85\\\\x17\\\\x53\\\\x9b\\\\x2a\\\\xef\\\\x54\\\\x33\\\\x02\\\\x7d\\\\x54\\\\xca\\\\x0a\\\\x4a\\\\x55\\\\x60\\\\x40\\\\xe2\\\\x55\\\\xf5\\\\xa4\\\\xd2\\\\x56\\\\x8a\\\\x34\\\\xa9\\\\x57\\\\x1d\\\\xee\\\\xf9\\\\x57\\\\xb0\\\\xd2\\\\x55\\\\x58\\\\x42\\\\xdd\\\\x54\\\\x58\\\\xd4\\\\x0e\\\\x8c\\\\x59\\\\x64\\\\x64\\\\x97\\\\x59\\\\xf3\\\\xde\\\\x12\\\\x5a\\\\x82\\\\x79\\\\x99\\\\x5b\\\\x10\\\\x35\\\\xce\\\\x5b\\\\x9d\\\\x11\\\\x53\\\\x5c\\\\x29\\\\x0a\\\\xcc\\\\x5c\\\\xb4\\\\x20\\\\xdf\\\\x5d\\\\x3e\\\\x52\\\\x36\\\\x5d\\\\xc7\\\\x9d\\\\x7b\\\\x5e\\\\x50\\\\x01\\\\x5d\\\\x5e\\\\xd7\\\\x7c\\\\x89\\\\x5f\\\\x5e\\\\x0d\\\\xb2\\\\x5f\\\\xe3\\\\xb3\\\\x8d\\\\x60\\\\x68\\\\x6c\\\\xce\\\\x60\\\\xec\\\\x38\\\\x2f\\\\x61\\\\x6f\\\\x14\\\\x6b\\\\x61\\\\xf1\\\\x00\\\\x3e\\\\x62\\\\x71\\\\xfa\\\\x68\\\\x62\\\\xf2\\\\x01\\\\xac\\\\x63\\\\x71\\\\x14\\\\xcc\\\\x63\\\\xef\\\\x32\\\\x8f\\\\x64\\\\x6c\\\\x59\\\\xbf\\\\x64\\\\xe8\\\\x89\\\\x25\\\\x65\\\\x63\\\\xbf\\\\x91\\\\x65\\\\xdd\\\\xfb\\\\xd2\\\\x66\\\\x57\\\\x3c\\\\xbb\\\\x66\\\\xcf\\\\x81\\\\x1f\\\\x67\\\\x46\\\\xc7\\\\xd7\\\\x67\\\\xbd\\\\x0f\\\\xbc\\\\x68\\\\x32\\\\x57\\\\xaa\\\\x68\\\\xa6\\\\x9e\\\\x80\\\\x69\\\\x19\\\\xe3\\\\x1f\\\\x69\\\\x8c\\\\x24\\\\x6b\\\\x69\\\\xfd\\\\x61\\\\x4a\\\\x6a\\\\x6d\\\\x98\\\\xa3\\\\x6a\\\\xdc\\\\xc9\\\\x64\\\\x6b\\\\x4a\\\\xf2\\\\x78\\\\x6b\\\\xb8\\\\x12\\\\xd0\\\\x6c\\\\x24\\\\x29\\\\x5f\\\\x6c\\\\x8f\\\\x35\\\\x1b\\\\x6c\\\\xf9\\\\x34\\\\xfb\\\\x6d\\\\x62\\\\x27\\\\xf9\\\\x6d\\\\xca\\\\x0d\\\\x14\\\\x6e\\\\x30\\\\xe3\\\\x49\\\\x6e\\\\x96\\\\xa9\\\\x9c\\\\x6e\\\\xfb\\\\x5f\\\\x11\\\\x6f\\\\x5f\\\\x02\\\\xb1\\\\x6f\\\\xc1\\\\x93\\\\x84\\\\x70\\\\x23\\\\x10\\\\x99\\\\x70\\\\x83\\\\x78\\\\xfe\\\\x70\\\\xe2\\\\xcb\\\\xc5\\\\x71\\\\x41\\\\x08\\\\x04\\\\x71\\\\x9e\\\\x2c\\\\xd1\\\\x71\\\\xfa\\\\x39\\\\x48\\\\x72\\\\x55\\\\x2c\\\\x84\\\\x72\\\\xaf\\\\x05\\\\xa6\\\\x73\\\\x07\\\\xc3\\\\xcf\\\\x73\\\\x5f\\\\x66\\\\x25\\\\x73\\\\xb5\\\\xeb\\\\xd0\\\\x74\\\\x0b\\\\x53\\\\xfa\\\\x74\\\\x5f\\\\x9d\\\\xd0\\\\x74\\\\xb2\\\\xc8\\\\x83\\\\x75\\\\x04\\\\xd3\\\\x44\\\\x75\\\\x55\\\\xbd\\\\x4b\\\\x75\\\\xa5\\\\x85\\\\xce\\\\x75\\\\xf4\\\\x2c\\\\x0a\\\\x76\\\\x41\\\\xaf\\\\x3c\\\\x76\\\\x8e\\\\x0e\\\\xa5\\\\x76\\\\xd9\\\\x49\\\\x88\\\\x77\\\\x23\\\\x5f\\\\x2c\\\\x77\\\\x6c\\\\x4e\\\\xda\\\\x77\\\\xb4\\\\x17\\\\xdf\\\\x77\\\\xfa\\\\xb9\\\\x88\\\\x78\\\\x40\\\\x33\\\\x28\\\\x78\\\\x84\\\\x84\\\\x13\\\\x78\\\\xc7\\\\xab\\\\xa1\\\\x79\\\\x09\\\\xa9\\\\x2c\\\\x79\\\\x4a\\\\x7c\\\\x11\\\\x79\\\\x8a\\\\x23\\\\xb0\\\\x79\\\\xc8\\\\x9f\\\\x6d\\\\x7a\\\\x05\\\\xee\\\\xac\\\\x7a\\\\x42\\\\x10\\\\xd8\\\\x7a\\\\x7d\\\\x05\\\\x5a\\\\x7a\\\\xb6\\\\xcb\\\\xa3\\\\x7a\\\\xef\\\\x63\\\\x23\\\\x7b\\\\x26\\\\xcb\\\\x4e\\\\x7b\\\\x5d\\\\x03\\\\x9d\\\\x7b\\\\x92\\\\x0b\\\\x88\\\\x7b\\\\xc5\\\\xe2\\\\x8f\\\\x7b\\\\xf8\\\\x88\\\\x2f\\\\x7c\\\\x29\\\\xfb\\\\xed\\\\x7c\\\\x5a\\\\x3d\\\\x4f\\\\x7c\\\\x89\\\\x4b\\\\xdd\\\\x7c\\\\xb7\\\\x27\\\\x23\\\\x7c\\\\xe3\\\\xce\\\\xb1\\\\x7d\\\\x0f\\\\x42\\\\x17\\\\x7d\\\\x39\\\\x80\\\\xeb\\\\x7d\\\\x62\\\\x8a\\\\xc5\\\\x7d\\\\x8a\\\\x5f\\\\x3f\\\\x7d\\\\xb0\\\\xfd\\\\xf7\\\\x7d\\\\xd6\\\\x66\\\\x8e\\\\x7d\\\\xfa\\\\x98\\\\xa7\\\\x7e\\\\x1d\\\\x93\\\\xe9\\\\x7e\\\\x3f\\\\x57\\\\xfe\\\\x7e\\\\x5f\\\\xe4\\\\x92\\\\x7e\\\\x7f\\\\x39\\\\x56\\\\x7e\\\\x9d\\\\x55\\\\xfb\\\\x7e\\\\xba\\\\x3a\\\\x38\\\\x7e\\\\xd5\\\\xe5\\\\xc5\\\\x7e\\\\xf0\\\\x58\\\\x5f\\\\x7f\\\\x09\\\\x91\\\\xc3\\\\x7f\\\\x21\\\\x91\\\\xb3\\\\x7f\\\\x38\\\\x57\\\\xf5\\\\x7f\\\\x4d\\\\xe4\\\\x50\\\\x7f\\\\x62\\\\x36\\\\x8e\\\\x7f\\\\x75\\\\x4e\\\\x7f\\\\x7f\\\\x87\\\\x2b\\\\xf2\\\\x7f\\\\x97\\\\xce\\\\xbc\\\\x7f\\\\xa7\\\\x36\\\\xb3\\\\x7f\\\\xb5\\\\x63\\\\xb2\\\\x7f\\\\xc2\\\\x55\\\\x95\\\\x7f\\\\xce\\\\x0c\\\\x3d\\\\x7f\\\\xd8\\\\x87\\\\x8d\\\\x7f\\\\xe1\\\\xc7\\\\x6a\\\\x7f\\\\xe9\\\\xcb\\\\xbf\\\\x7f\\\\xf0\\\\x94\\\\x77\\\\x7f\\\\xf6\\\\x21\\\\x81\\\\x7f\\\\xfa\\\\x72\\\\xd0\\\\x7f\\\\xfd\\\\x88\\\\x59\\\\x7f\\\\xff\\\\x62\\\\x15\\\\x7f\\\\xff\\\\xff\\\\xff\\\";\\n    /**\\n     * Convenience function to apply a mask on an integer to extract a certain\\n     * number of bits. Using exponents since solidity still does not support\\n     * shifting.\\n     *\\n     * @param _value The integer whose bits we want to get\\n     * @param _width The width of the bits (in bits) we want to extract\\n     * @param _offset The offset of the bits (in bits) we want to extract\\n     * @return An integer containing _width bits of _value starting at the\\n     *         _offset bit\\n     */\\n    function bits(uint _value, uint _width, uint _offset) pure internal returns (uint) {\\n        return (_value / (2 ** _offset)) & (((2 ** _width)) - 1);\\n    }\\n\\n    function sinTableLookup(uint index) pure internal returns (uint32) {\\n        bytes memory table = SIN_TABLE;\\n        uint offset = (index + 1) * ENTRY_BYTES;\\n        uint32 trigint_value;\\n        assembly {\\n            trigint_value := mload(add(table, offset))\\n        }\\n\\n        return trigint_value;\\n    }\\n\\n    /**\\n     * Return the sine of an integer approximated angle as a signed 16-bit\\n     * integer.\\n     *\\n     * @param _angle A 30-bit angle. This divides the circle into 1073741824\\n     *     angle units, instead of the standard 360 degrees.\\n     * @return The sine result as a number in the range -2147483647 to 2147483647.\\n     */\\n    function sin(uint256 _angle) public pure returns (int) {\\n        uint interp = bits(_angle, INTERP_WIDTH, INTERP_OFFSET);\\n        uint index = bits(_angle, INDEX_WIDTH, INDEX_OFFSET);\\n\\n        bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n        bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n        if (!is_odd_quadrant) {\\n            index = SINE_TABLE_SIZE - 1 - index;\\n        }\\n\\n        uint x1 = sinTableLookup(index);\\n        uint x2 = sinTableLookup(index + 1);\\n        uint approximation = ((x2 - x1) * interp) / (2 ** INTERP_WIDTH);\\n\\n        int sine;\\n        if (is_odd_quadrant) {\\n            sine = int(x1) + int(approximation);\\n        } else {\\n            sine = int(x2) - int(approximation);\\n        }\\n\\n        if (is_negative_quadrant) {\\n            sine *= -1;\\n        }\\n\\n        return sine;\\n    }\\n}\\n\",\"keccak256\":\"0x286c23e8badf3201fbbd1b1f78958aa780bb815b6388cd004509ed9e81b3b7f7\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e9938038062002e998339818101604052810190620000379190620001f3565b60016000819055506200005f62000053620000a760201b60201c565b620000af60201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000225565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a7826200017a565b9050919050565b6000620001bb826200019a565b9050919050565b620001cd81620001ae565b8114620001d957600080fd5b50565b600081519050620001ed81620001c2565b92915050565b6000602082840312156200020c576200020b62000175565b5b60006200021c84828501620001dc565b91505092915050565b612c6480620002356000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637b648ad61161008c578063a3f4d09b11610066578063a3f4d09b146101fd578063e57093b014610219578063f2fde38b14610249578063f689fa4714610265576100ea565b80637b648ad6146101a55780638da5cb5b146101c15780639e923de9146101df576100ea565b806361e91e04116100c857806361e91e04146101475780636c52cf8614610163578063715018a61461017f57806373fcf14614610189576100ea565b8063163e88aa146100ef57806328db5a221461010d5780633d23bb961461012b575b600080fd5b6100f7610295565b604051610104919061195a565b60405180910390f35b6101156102bb565b6040516101229190611a3d565b60405180910390f35b61014560048036038101906101409190611f5f565b610313565b005b610161600480360381019061015c9190611ffe565b610602565b005b61017d6004803603810190610178919061203e565b610799565b005b610187610af9565b005b6101a3600480360381019061019e919061203e565b610b81565b005b6101bf60048036038101906101ba91906120f5565b610e08565b005b6101c9610e66565b6040516101d691906121a6565b60405180910390f35b6101e7610e90565b6040516101f491906121dd565b60405180910390f35b610217600480360381019061021291906121f8565b610e95565b005b610233600480360381019061022e9190612251565b611134565b6040516102409190611a3d565b60405180910390f35b610263600480360381019061025e91906122d0565b6111ce565b005b61027f600480360381019061027a91906122fd565b6112c5565b60405161028c9190611a3d565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380548060200260200160405190810160405280929190818152602001828054801561030957602002820191906000526020600020905b8154815260200190600101908083116102f5575b5050505050905090565b61031b611344565b73ffffffffffffffffffffffffffffffffffffffff16610339610e66565b73ffffffffffffffffffffffffffffffffffffffff161461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906123a3565b60405180910390fd5b6000739fE46736679d2D9a65F0992F2272dE9f3c7fa6e063defe2c1c856040518263ffffffff1660e01b81526004016103c891906125df565b602060405180830381865af41580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190612616565b905060008360006002811061042157610420612643565b5b6020020151905060008460016002811061043e5761043d612643565b5b602002015190506000600560008981526020019081526020016000208054610465906126a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610491906126a1565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b50505050509050600073Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9637161e2e0858560086040518463ffffffff1660e01b8152600401610523939291906126f0565b600060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061056991906127ca565b90506000610577838361134c565b9050806105bb57610588828b6113a5565b610592828b610799565b81600560008c815260200190815260200160002090805190602001906105b9929190611778565b505b7fd5368936c6574d161396839c9c3eecf6366b2caba3110635c5092ceb4c97ca548a88886040516105ee93929190612866565b60405180910390a150505050505050505050565b61060a611344565b73ffffffffffffffffffffffffffffffffffffffff16610628610e66565b73ffffffffffffffffffffffffffffffffffffffff161461067e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610675906123a3565b60405180910390fd5b60008160006002811061069457610693612643565b5b602002015190506000826001600281106106b1576106b0612643565b5b602002015190506106c184611417565b600073Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9637161e2e0848460086040518463ffffffff1660e01b81526004016106ff939291906126f0565b600060405180830381865af415801561071c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074591906127ca565b90506107518186610799565b61075b8582611443565b7ff131f45254d8a96a7bdc8a658fdd1b47b9c38d99ad9f8741a39f3ad8c39d0ee08560405161078a91906128a4565b60405180910390a15050505050565b600860ff168251146107aa57600080fd5b600082905060005b81518160ff161015610af35760006107e560006001846107d291906128ee565b60ff168561146f9092919063ffffffff16565b905060006004826040516107f99190612961565b908152602001604051809103902090506000610878826040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561086957602002820191906000526020600020905b815481526020019060010190808311610855575b5050505050815250508761158d565b905080156108c6576108be6040518060400160405280601881526020017f4461746120616c726561647920696e20746865206e6f646500000000000000008152506115f0565b505050610ae0565b600082600001805490500361099b57600167ffffffffffffffff8111156108f0576108ef611ab5565b5b60405190808252806020026020018201604052801561091e5781602001602082028036833780820191505090505b508260000190805190602001906109369291906117fe565b50858260000160008154811061094f5761094e612643565b5b90600052602060002001819055508160048460405161096e9190612961565b9081526020016040518091039020600082018160000190805461099292919061184b565b50905050610adc565b6000600183600001805490506109b19190612978565b67ffffffffffffffff8111156109ca576109c9611ab5565b5b6040519080825280602002602001820160405280156109f85781602001602082028036833780820191505090505b50905060005b8360000180549050811015610a6057836000018181548110610a2357610a22612643565b5b9060005260206000200154828281518110610a4157610a40612643565b5b6020026020010181815250508080610a58906129ce565b9150506109fe565b508681846000018054905081518110610a7c57610a7b612643565b5b60200260200101818152505080836000019080519060200190610aa09291906117fe565b5082600485604051610ab29190612961565b90815260200160405180910390206000820181600001908054610ad692919061184b565b50905050505b5050505b8080610aeb90612a16565b9150506107b2565b50505050565b610b01611344565b73ffffffffffffffffffffffffffffffffffffffff16610b1f610e66565b73ffffffffffffffffffffffffffffffffffffffff1614610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c906123a3565b60405180910390fd5b610b7f6000611689565b565b6000600483604051610b939190612961565b908152602001604051809103902090506000610c128260405180602001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610c0357602002820191906000526020600020905b815481526020019060010190808311610bef575b5050505050815250508461158d565b905080610c5e57610c576040518060400160405280601081526020017f44617461206e6f7420696e206e6f6465000000000000000000000000000000008152506115f0565b5050610e04565b6001826000018054905003610ca357600484604051610c7d9190612961565b908152602001604051809103902060008082016000610c9c919061189d565b5050610e01565b600060018360000180549050610cb99190612a3f565b67ffffffffffffffff811115610cd257610cd1611ab5565b5b604051908082528060200260200182016040528015610d005781602001602082028036833780820191505090505b5090506000805b60018560000180549050610d1b9190612a3f565b811015610dab5785856000018281548110610d3957610d38612643565b5b906000526020600020015414610d9857846000018181548110610d5f57610d5e612643565b5b9060005260206000200154838381518110610d7d57610d7c612643565b5b6020026020010181815250508180610d94906129ce565b9250505b8080610da3906129ce565b915050610d07565b5081846000019080519060200190610dc49291906117fe565b5083600487604051610dd69190612961565b90815260200160405180910390206000820181600001908054610dfa92919061184b565b5090505050505b50505b5050565b610e128482610b81565b610e6083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610799565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600881565b610e9d611344565b73ffffffffffffffffffffffffffffffffffffffff16610ebb610e66565b73ffffffffffffffffffffffffffffffffffffffff1614610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906123a3565b60405180910390fd5b6000600560008381526020019081526020016000208054610f31906126a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5d906126a1565b8015610faa5780601f10610f7f57610100808354040283529160200191610faa565b820191906000526020600020905b815481529060010190602001808311610f8d57829003601f168201915b50505050509050610fbb81836113a5565b600160038054905003610ff5576003805480610fda57610fd9612a73565b5b600190038181906000526020600020016000905590556110f9565b600060016003805490506110099190612a3f565b67ffffffffffffffff81111561102257611021611ab5565b5b6040519080825280602002602001820160405280156110505781602001602082028036833780820191505090505b5090506000805b60016003805490506110699190612a3f565b8110156110f557846003828154811061108557611084612643565b5b9060005260206000200154146110e257600381815481106110a9576110a8612643565b5b90600052602060002001548383815181106110c7576110c6612643565b5b60200260200101818152505081806110de906129ce565b9250505b80806110ed906129ce565b915050611057565b5050505b7fd50f75cf5c87bfa9ed2c8eb5d64d50828b5eaa20bb5fe8530fee4a1c5f3663bb8260405161112891906128a4565b60405180910390a15050565b6060600073Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9637161e2e08686866040518463ffffffff1660e01b8152600401611173939291906126f0565b600060405180830381865af4158015611190573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111b991906127ca565b90506111c4816112c5565b9150509392505050565b6111d6611344565b73ffffffffffffffffffffffffffffffffffffffff166111f4610e66565b73ffffffffffffffffffffffffffffffffffffffff161461124a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611241906123a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b090612b14565b60405180910390fd5b6112c281611689565b50565b606060006004836040516112d99190612961565b908152602001604051809103902090508060000180548060200260200160405190810160405280929190818152602001828054801561133757602002820191906000526020600020905b815481526020019060010190808311611323575b5050505050915050919050565b600033905090565b60008160405160200161135f9190612961565b60405160208183030381529060405280519060200120836040516020016113869190612961565b6040516020818303038152906040528051906020012014905092915050565b6000829050600860ff168151146113bb57600080fd5b60005b81518160ff1610156114115760006113f160006001846113de91906128ee565b60ff168561146f9092919063ffffffff16565b90506113fd8185610b81565b50808061140990612a16565b9150506113be565b50505050565b600381908060018154018082558091505060019003906000526020600020016000909190919091505550565b8060056000848152602001908152602001600020908051906020019061146a929190611778565b505050565b606081601f8361147f9190612978565b10156114c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b790612b80565b60405180910390fd5b81836114cc9190612978565b8451101561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612bec565b60405180910390fd5b60608215600081146115305760405191506000825260208201604052611581565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561156e5780518352602083019250602081019050611551565b50868552601f19601f8301166040525050505b50809150509392505050565b600080600090505b8360000151518110156115e45782846000015182815181106115ba576115b9612643565b5b6020026020010151036115d15760019150506115ea565b80806115dc906129ce565b915050611595565b50600090505b92915050565b611686816040516024016116049190612c0c565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061174f565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054611784906126a1565b90600052602060002090601f0160209004810192826117a657600085556117ed565b82601f106117bf57805160ff19168380011785556117ed565b828001600101855582156117ed579182015b828111156117ec5782518255916020019190600101906117d1565b5b5090506117fa91906118be565b5090565b82805482825590600052602060002090810192821561183a579160200282015b8281111561183957825182559160200191906001019061181e565b5b50905061184791906118be565b5090565b82805482825590600052602060002090810192821561188c5760005260206000209182015b8281111561188b578254825591600101919060010190611870565b5b50905061189991906118be565b5090565b50805460008255906000526020600020908101906118bb91906118be565b50565b5b808211156118d75760008160009055506001016118bf565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061192061191b611916846118db565b6118fb565b6118db565b9050919050565b600061193282611905565b9050919050565b600061194482611927565b9050919050565b61195481611939565b82525050565b600060208201905061196f600083018461194b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6119b4816119a1565b82525050565b60006119c683836119ab565b60208301905092915050565b6000602082019050919050565b60006119ea82611975565b6119f48185611980565b93506119ff83611991565b8060005b83811015611a30578151611a1788826119ba565b9750611a22836119d2565b925050600181019050611a03565b5085935050505092915050565b60006020820190508181036000830152611a5781846119df565b905092915050565b6000604051905090565b600080fd5b600080fd5b611a7c816119a1565b8114611a8757600080fd5b50565b600081359050611a9981611a73565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611aed82611aa4565b810181811067ffffffffffffffff82111715611b0c57611b0b611ab5565b5b80604052505050565b6000611b1f611a5f565b9050611b2b8282611ae4565b919050565b600067ffffffffffffffff821115611b4b57611b4a611ab5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115611b7c57611b7b611ab5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611ba857611ba7611ab5565b5b602082029050919050565b6000819050919050565b611bc681611bb3565b8114611bd157600080fd5b50565b600081359050611be381611bbd565b92915050565b6000611bfc611bf784611b8d565b611b15565b90508060208402830185811115611c1657611c15611b5c565b5b835b81811015611c3f5780611c2b8882611bd4565b845260208401935050602081019050611c18565b5050509392505050565b600082601f830112611c5e57611c5d611a9f565b5b6002611c6b848285611be9565b91505092915050565b6000611c87611c8284611b61565b611b15565b90508083825260208201905060408402830185811115611caa57611ca9611b5c565b5b835b81811015611cd35780611cbf8882611c49565b845260208401935050604081019050611cac565b5050509392505050565b600082601f830112611cf257611cf1611a9f565b5b8135611d02848260208601611c74565b91505092915050565b6000611d1e611d1984611b30565b611b15565b90508083825260208201905060208402830185811115611d4157611d40611b5c565b5b835b81811015611d8857803567ffffffffffffffff811115611d6657611d65611a9f565b5b808601611d738982611cdd565b85526020850194505050602081019050611d43565b5050509392505050565b600082601f830112611da757611da6611a9f565b5b8135611db7848260208601611d0b565b91505092915050565b600067ffffffffffffffff821115611ddb57611dda611ab5565b5b602082029050919050565b60008160070b9050919050565b611dfc81611de6565b8114611e0757600080fd5b50565b600081359050611e1981611df3565b92915050565b6000611e32611e2d84611dc0565b611b15565b90508060208402830185811115611e4c57611e4b611b5c565b5b835b81811015611e755780611e618882611e0a565b845260208401935050602081019050611e4e565b5050509392505050565b600082601f830112611e9457611e93611a9f565b5b6002611ea1848285611e1f565b91505092915050565b600080fd5b600067ffffffffffffffff821115611eca57611ec9611ab5565b5b611ed382611aa4565b9050602081019050919050565b82818337600083830152505050565b6000611f02611efd84611eaf565b611b15565b905082815260208101848484011115611f1e57611f1d611eaa565b5b611f29848285611ee0565b509392505050565b600082601f830112611f4657611f45611a9f565b5b8135611f56848260208601611eef565b91505092915050565b60008060008060a08587031215611f7957611f78611a69565b5b6000611f8787828801611a8a565b945050602085013567ffffffffffffffff811115611fa857611fa7611a6e565b5b611fb487828801611d92565b9350506040611fc587828801611e7f565b925050608085013567ffffffffffffffff811115611fe657611fe5611a6e565b5b611ff287828801611f31565b91505092959194509250565b6000806060838503121561201557612014611a69565b5b600061202385828601611a8a565b925050602061203485828601611e7f565b9150509250929050565b6000806040838503121561205557612054611a69565b5b600083013567ffffffffffffffff81111561207357612072611a6e565b5b61207f85828601611f31565b925050602061209085828601611a8a565b9150509250929050565b600080fd5b60008083601f8401126120b5576120b4611a9f565b5b8235905067ffffffffffffffff8111156120d2576120d161209a565b5b6020830191508360018202830111156120ee576120ed611b5c565b5b9250929050565b6000806000806060858703121561210f5761210e611a69565b5b600085013567ffffffffffffffff81111561212d5761212c611a6e565b5b61213987828801611f31565b945050602085013567ffffffffffffffff81111561215a57612159611a6e565b5b6121668782880161209f565b9350935050604061217987828801611a8a565b91505092959194509250565b6000612190826118db565b9050919050565b6121a081612185565b82525050565b60006020820190506121bb6000830184612197565b92915050565b600060ff82169050919050565b6121d7816121c1565b82525050565b60006020820190506121f260008301846121ce565b92915050565b60006020828403121561220e5761220d611a69565b5b600061221c84828501611a8a565b91505092915050565b61222e816121c1565b811461223957600080fd5b50565b60008135905061224b81612225565b92915050565b60008060006060848603121561226a57612269611a69565b5b600061227886828701611e0a565b935050602061228986828701611e0a565b925050604061229a8682870161223c565b9150509250925092565b6122ad81612185565b81146122b857600080fd5b50565b6000813590506122ca816122a4565b92915050565b6000602082840312156122e6576122e5611a69565b5b60006122f4848285016122bb565b91505092915050565b60006020828403121561231357612312611a69565b5b600082013567ffffffffffffffff81111561233157612330611a6e565b5b61233d84828501611f31565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061238d602083612346565b915061239882612357565b602082019050919050565b600060208201905081810360008301526123bc81612380565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060029050919050565b600081905092915050565b6000819050919050565b61244481611bb3565b82525050565b6000612456838361243b565b60208301905092915050565b6000602082019050919050565b6124788161241b565b6124828184612426565b925061248d82612431565b8060005b838110156124be5781516124a5878261244a565b96506124b083612462565b925050600181019050612491565b505050505050565b60006124d2838361246f565b60408301905092915050565b6000602082019050919050565b60006124f6826123ef565b61250081856123fa565b935061250b8361240b565b8060005b8381101561253c57815161252388826124c6565b975061252e836124de565b92505060018101905061250f565b5085935050505092915050565b600061255583836124eb565b905092915050565b6000602082019050919050565b6000612575826123c3565b61257f81856123ce565b935083602082028501612591856123df565b8060005b858110156125cd57848403895281516125ae8582612549565b94506125b98361255d565b925060208a01995050600181019050612595565b50829750879550505050505092915050565b600060208201905081810360008301526125f9818461256a565b905092915050565b60008151905061261081611a73565b92915050565b60006020828403121561262c5761262b611a69565b5b600061263a84828501612601565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126b957607f821691505b6020821081036126cc576126cb612672565b5b50919050565b6126db81611de6565b82525050565b6126ea816121c1565b82525050565b600060608201905061270560008301866126d2565b61271260208301856126d2565b61271f60408301846126e1565b949350505050565b60005b8381101561274557808201518184015260208101905061272a565b83811115612754576000848401525b50505050565b600061276d61276884611eaf565b611b15565b90508281526020810184848401111561278957612788611eaa565b5b612794848285612727565b509392505050565b600082601f8301126127b1576127b0611a9f565b5b81516127c184826020860161275a565b91505092915050565b6000602082840312156127e0576127df611a69565b5b600082015167ffffffffffffffff8111156127fe576127fd611a6e565b5b61280a8482850161279c565b91505092915050565b61281c816119a1565b82525050565b600081519050919050565b600061283882612822565b6128428185612346565b9350612852818560208601612727565b61285b81611aa4565b840191505092915050565b600060608201905061287b6000830186612813565b818103602083015261288d818561282d565b905061289c6040830184612813565b949350505050565b60006020820190506128b96000830184612813565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128f9826121c1565b9150612904836121c1565b92508260ff0382111561291a576129196128bf565b5b828201905092915050565b600081905092915050565b600061293b82612822565b6129458185612925565b9350612955818560208601612727565b80840191505092915050565b600061296d8284612930565b915081905092915050565b6000612983826119a1565b915061298e836119a1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129c3576129c26128bf565b5b828201905092915050565b60006129d9826119a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0b57612a0a6128bf565b5b600182019050919050565b6000612a21826121c1565b915060ff8203612a3457612a336128bf565b5b600182019050919050565b6000612a4a826119a1565b9150612a55836119a1565b925082821015612a6857612a676128bf565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612afe602683612346565b9150612b0982612aa2565b604082019050919050565b60006020820190508181036000830152612b2d81612af1565b9050919050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612b6a600e83612346565b9150612b7582612b34565b602082019050919050565b60006020820190508181036000830152612b9981612b5d565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612bd6601183612346565b9150612be182612ba0565b602082019050919050565b60006020820190508181036000830152612c0581612bc9565b9050919050565b60006020820190508181036000830152612c26818461282d565b90509291505056fea26469706673582212203dc764979cb99897b7379d474a3a522f1d8180d98a4f428ff95f1b770f0f0c7164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637b648ad61161008c578063a3f4d09b11610066578063a3f4d09b146101fd578063e57093b014610219578063f2fde38b14610249578063f689fa4714610265576100ea565b80637b648ad6146101a55780638da5cb5b146101c15780639e923de9146101df576100ea565b806361e91e04116100c857806361e91e04146101475780636c52cf8614610163578063715018a61461017f57806373fcf14614610189576100ea565b8063163e88aa146100ef57806328db5a221461010d5780633d23bb961461012b575b600080fd5b6100f7610295565b604051610104919061195a565b60405180910390f35b6101156102bb565b6040516101229190611a3d565b60405180910390f35b61014560048036038101906101409190611f5f565b610313565b005b610161600480360381019061015c9190611ffe565b610602565b005b61017d6004803603810190610178919061203e565b610799565b005b610187610af9565b005b6101a3600480360381019061019e919061203e565b610b81565b005b6101bf60048036038101906101ba91906120f5565b610e08565b005b6101c9610e66565b6040516101d691906121a6565b60405180910390f35b6101e7610e90565b6040516101f491906121dd565b60405180910390f35b610217600480360381019061021291906121f8565b610e95565b005b610233600480360381019061022e9190612251565b611134565b6040516102409190611a3d565b60405180910390f35b610263600480360381019061025e91906122d0565b6111ce565b005b61027f600480360381019061027a91906122fd565b6112c5565b60405161028c9190611a3d565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380548060200260200160405190810160405280929190818152602001828054801561030957602002820191906000526020600020905b8154815260200190600101908083116102f5575b5050505050905090565b61031b611344565b73ffffffffffffffffffffffffffffffffffffffff16610339610e66565b73ffffffffffffffffffffffffffffffffffffffff161461038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906123a3565b60405180910390fd5b600073__$9b062ab5c950cf193f582284c7b82e9862$__63defe2c1c856040518263ffffffff1660e01b81526004016103c891906125df565b602060405180830381865af41580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190612616565b905060008360006002811061042157610420612643565b5b6020020151905060008460016002811061043e5761043d612643565b5b602002015190506000600560008981526020019081526020016000208054610465906126a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610491906126a1565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b50505050509050600073__$3a9a7d4234673457923161741a4caf1fa9$__637161e2e0858560086040518463ffffffff1660e01b8152600401610523939291906126f0565b600060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061056991906127ca565b90506000610577838361134c565b9050806105bb57610588828b6113a5565b610592828b610799565b81600560008c815260200190815260200160002090805190602001906105b9929190611778565b505b7fd5368936c6574d161396839c9c3eecf6366b2caba3110635c5092ceb4c97ca548a88886040516105ee93929190612866565b60405180910390a150505050505050505050565b61060a611344565b73ffffffffffffffffffffffffffffffffffffffff16610628610e66565b73ffffffffffffffffffffffffffffffffffffffff161461067e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610675906123a3565b60405180910390fd5b60008160006002811061069457610693612643565b5b602002015190506000826001600281106106b1576106b0612643565b5b602002015190506106c184611417565b600073__$3a9a7d4234673457923161741a4caf1fa9$__637161e2e0848460086040518463ffffffff1660e01b81526004016106ff939291906126f0565b600060405180830381865af415801561071c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074591906127ca565b90506107518186610799565b61075b8582611443565b7ff131f45254d8a96a7bdc8a658fdd1b47b9c38d99ad9f8741a39f3ad8c39d0ee08560405161078a91906128a4565b60405180910390a15050505050565b600860ff168251146107aa57600080fd5b600082905060005b81518160ff161015610af35760006107e560006001846107d291906128ee565b60ff168561146f9092919063ffffffff16565b905060006004826040516107f99190612961565b908152602001604051809103902090506000610878826040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561086957602002820191906000526020600020905b815481526020019060010190808311610855575b5050505050815250508761158d565b905080156108c6576108be6040518060400160405280601881526020017f4461746120616c726561647920696e20746865206e6f646500000000000000008152506115f0565b505050610ae0565b600082600001805490500361099b57600167ffffffffffffffff8111156108f0576108ef611ab5565b5b60405190808252806020026020018201604052801561091e5781602001602082028036833780820191505090505b508260000190805190602001906109369291906117fe565b50858260000160008154811061094f5761094e612643565b5b90600052602060002001819055508160048460405161096e9190612961565b9081526020016040518091039020600082018160000190805461099292919061184b565b50905050610adc565b6000600183600001805490506109b19190612978565b67ffffffffffffffff8111156109ca576109c9611ab5565b5b6040519080825280602002602001820160405280156109f85781602001602082028036833780820191505090505b50905060005b8360000180549050811015610a6057836000018181548110610a2357610a22612643565b5b9060005260206000200154828281518110610a4157610a40612643565b5b6020026020010181815250508080610a58906129ce565b9150506109fe565b508681846000018054905081518110610a7c57610a7b612643565b5b60200260200101818152505080836000019080519060200190610aa09291906117fe565b5082600485604051610ab29190612961565b90815260200160405180910390206000820181600001908054610ad692919061184b565b50905050505b5050505b8080610aeb90612a16565b9150506107b2565b50505050565b610b01611344565b73ffffffffffffffffffffffffffffffffffffffff16610b1f610e66565b73ffffffffffffffffffffffffffffffffffffffff1614610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c906123a3565b60405180910390fd5b610b7f6000611689565b565b6000600483604051610b939190612961565b908152602001604051809103902090506000610c128260405180602001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610c0357602002820191906000526020600020905b815481526020019060010190808311610bef575b5050505050815250508461158d565b905080610c5e57610c576040518060400160405280601081526020017f44617461206e6f7420696e206e6f6465000000000000000000000000000000008152506115f0565b5050610e04565b6001826000018054905003610ca357600484604051610c7d9190612961565b908152602001604051809103902060008082016000610c9c919061189d565b5050610e01565b600060018360000180549050610cb99190612a3f565b67ffffffffffffffff811115610cd257610cd1611ab5565b5b604051908082528060200260200182016040528015610d005781602001602082028036833780820191505090505b5090506000805b60018560000180549050610d1b9190612a3f565b811015610dab5785856000018281548110610d3957610d38612643565b5b906000526020600020015414610d9857846000018181548110610d5f57610d5e612643565b5b9060005260206000200154838381518110610d7d57610d7c612643565b5b6020026020010181815250508180610d94906129ce565b9250505b8080610da3906129ce565b915050610d07565b5081846000019080519060200190610dc49291906117fe565b5083600487604051610dd69190612961565b90815260200160405180910390206000820181600001908054610dfa92919061184b565b5090505050505b50505b5050565b610e128482610b81565b610e6083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610799565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600881565b610e9d611344565b73ffffffffffffffffffffffffffffffffffffffff16610ebb610e66565b73ffffffffffffffffffffffffffffffffffffffff1614610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906123a3565b60405180910390fd5b6000600560008381526020019081526020016000208054610f31906126a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5d906126a1565b8015610faa5780601f10610f7f57610100808354040283529160200191610faa565b820191906000526020600020905b815481529060010190602001808311610f8d57829003601f168201915b50505050509050610fbb81836113a5565b600160038054905003610ff5576003805480610fda57610fd9612a73565b5b600190038181906000526020600020016000905590556110f9565b600060016003805490506110099190612a3f565b67ffffffffffffffff81111561102257611021611ab5565b5b6040519080825280602002602001820160405280156110505781602001602082028036833780820191505090505b5090506000805b60016003805490506110699190612a3f565b8110156110f557846003828154811061108557611084612643565b5b9060005260206000200154146110e257600381815481106110a9576110a8612643565b5b90600052602060002001548383815181106110c7576110c6612643565b5b60200260200101818152505081806110de906129ce565b9250505b80806110ed906129ce565b915050611057565b5050505b7fd50f75cf5c87bfa9ed2c8eb5d64d50828b5eaa20bb5fe8530fee4a1c5f3663bb8260405161112891906128a4565b60405180910390a15050565b6060600073__$3a9a7d4234673457923161741a4caf1fa9$__637161e2e08686866040518463ffffffff1660e01b8152600401611173939291906126f0565b600060405180830381865af4158015611190573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111b991906127ca565b90506111c4816112c5565b9150509392505050565b6111d6611344565b73ffffffffffffffffffffffffffffffffffffffff166111f4610e66565b73ffffffffffffffffffffffffffffffffffffffff161461124a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611241906123a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b090612b14565b60405180910390fd5b6112c281611689565b50565b606060006004836040516112d99190612961565b908152602001604051809103902090508060000180548060200260200160405190810160405280929190818152602001828054801561133757602002820191906000526020600020905b815481526020019060010190808311611323575b5050505050915050919050565b600033905090565b60008160405160200161135f9190612961565b60405160208183030381529060405280519060200120836040516020016113869190612961565b6040516020818303038152906040528051906020012014905092915050565b6000829050600860ff168151146113bb57600080fd5b60005b81518160ff1610156114115760006113f160006001846113de91906128ee565b60ff168561146f9092919063ffffffff16565b90506113fd8185610b81565b50808061140990612a16565b9150506113be565b50505050565b600381908060018154018082558091505060019003906000526020600020016000909190919091505550565b8060056000848152602001908152602001600020908051906020019061146a929190611778565b505050565b606081601f8361147f9190612978565b10156114c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b790612b80565b60405180910390fd5b81836114cc9190612978565b8451101561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612bec565b60405180910390fd5b60608215600081146115305760405191506000825260208201604052611581565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561156e5780518352602083019250602081019050611551565b50868552601f19601f8301166040525050505b50809150509392505050565b600080600090505b8360000151518110156115e45782846000015182815181106115ba576115b9612643565b5b6020026020010151036115d15760019150506115ea565b80806115dc906129ce565b915050611595565b50600090505b92915050565b611686816040516024016116049190612c0c565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061174f565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054611784906126a1565b90600052602060002090601f0160209004810192826117a657600085556117ed565b82601f106117bf57805160ff19168380011785556117ed565b828001600101855582156117ed579182015b828111156117ec5782518255916020019190600101906117d1565b5b5090506117fa91906118be565b5090565b82805482825590600052602060002090810192821561183a579160200282015b8281111561183957825182559160200191906001019061181e565b5b50905061184791906118be565b5090565b82805482825590600052602060002090810192821561188c5760005260206000209182015b8281111561188b578254825591600101919060010190611870565b5b50905061189991906118be565b5090565b50805460008255906000526020600020908101906118bb91906118be565b50565b5b808211156118d75760008160009055506001016118bf565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061192061191b611916846118db565b6118fb565b6118db565b9050919050565b600061193282611905565b9050919050565b600061194482611927565b9050919050565b61195481611939565b82525050565b600060208201905061196f600083018461194b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6119b4816119a1565b82525050565b60006119c683836119ab565b60208301905092915050565b6000602082019050919050565b60006119ea82611975565b6119f48185611980565b93506119ff83611991565b8060005b83811015611a30578151611a1788826119ba565b9750611a22836119d2565b925050600181019050611a03565b5085935050505092915050565b60006020820190508181036000830152611a5781846119df565b905092915050565b6000604051905090565b600080fd5b600080fd5b611a7c816119a1565b8114611a8757600080fd5b50565b600081359050611a9981611a73565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611aed82611aa4565b810181811067ffffffffffffffff82111715611b0c57611b0b611ab5565b5b80604052505050565b6000611b1f611a5f565b9050611b2b8282611ae4565b919050565b600067ffffffffffffffff821115611b4b57611b4a611ab5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115611b7c57611b7b611ab5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611ba857611ba7611ab5565b5b602082029050919050565b6000819050919050565b611bc681611bb3565b8114611bd157600080fd5b50565b600081359050611be381611bbd565b92915050565b6000611bfc611bf784611b8d565b611b15565b90508060208402830185811115611c1657611c15611b5c565b5b835b81811015611c3f5780611c2b8882611bd4565b845260208401935050602081019050611c18565b5050509392505050565b600082601f830112611c5e57611c5d611a9f565b5b6002611c6b848285611be9565b91505092915050565b6000611c87611c8284611b61565b611b15565b90508083825260208201905060408402830185811115611caa57611ca9611b5c565b5b835b81811015611cd35780611cbf8882611c49565b845260208401935050604081019050611cac565b5050509392505050565b600082601f830112611cf257611cf1611a9f565b5b8135611d02848260208601611c74565b91505092915050565b6000611d1e611d1984611b30565b611b15565b90508083825260208201905060208402830185811115611d4157611d40611b5c565b5b835b81811015611d8857803567ffffffffffffffff811115611d6657611d65611a9f565b5b808601611d738982611cdd565b85526020850194505050602081019050611d43565b5050509392505050565b600082601f830112611da757611da6611a9f565b5b8135611db7848260208601611d0b565b91505092915050565b600067ffffffffffffffff821115611ddb57611dda611ab5565b5b602082029050919050565b60008160070b9050919050565b611dfc81611de6565b8114611e0757600080fd5b50565b600081359050611e1981611df3565b92915050565b6000611e32611e2d84611dc0565b611b15565b90508060208402830185811115611e4c57611e4b611b5c565b5b835b81811015611e755780611e618882611e0a565b845260208401935050602081019050611e4e565b5050509392505050565b600082601f830112611e9457611e93611a9f565b5b6002611ea1848285611e1f565b91505092915050565b600080fd5b600067ffffffffffffffff821115611eca57611ec9611ab5565b5b611ed382611aa4565b9050602081019050919050565b82818337600083830152505050565b6000611f02611efd84611eaf565b611b15565b905082815260208101848484011115611f1e57611f1d611eaa565b5b611f29848285611ee0565b509392505050565b600082601f830112611f4657611f45611a9f565b5b8135611f56848260208601611eef565b91505092915050565b60008060008060a08587031215611f7957611f78611a69565b5b6000611f8787828801611a8a565b945050602085013567ffffffffffffffff811115611fa857611fa7611a6e565b5b611fb487828801611d92565b9350506040611fc587828801611e7f565b925050608085013567ffffffffffffffff811115611fe657611fe5611a6e565b5b611ff287828801611f31565b91505092959194509250565b6000806060838503121561201557612014611a69565b5b600061202385828601611a8a565b925050602061203485828601611e7f565b9150509250929050565b6000806040838503121561205557612054611a69565b5b600083013567ffffffffffffffff81111561207357612072611a6e565b5b61207f85828601611f31565b925050602061209085828601611a8a565b9150509250929050565b600080fd5b60008083601f8401126120b5576120b4611a9f565b5b8235905067ffffffffffffffff8111156120d2576120d161209a565b5b6020830191508360018202830111156120ee576120ed611b5c565b5b9250929050565b6000806000806060858703121561210f5761210e611a69565b5b600085013567ffffffffffffffff81111561212d5761212c611a6e565b5b61213987828801611f31565b945050602085013567ffffffffffffffff81111561215a57612159611a6e565b5b6121668782880161209f565b9350935050604061217987828801611a8a565b91505092959194509250565b6000612190826118db565b9050919050565b6121a081612185565b82525050565b60006020820190506121bb6000830184612197565b92915050565b600060ff82169050919050565b6121d7816121c1565b82525050565b60006020820190506121f260008301846121ce565b92915050565b60006020828403121561220e5761220d611a69565b5b600061221c84828501611a8a565b91505092915050565b61222e816121c1565b811461223957600080fd5b50565b60008135905061224b81612225565b92915050565b60008060006060848603121561226a57612269611a69565b5b600061227886828701611e0a565b935050602061228986828701611e0a565b925050604061229a8682870161223c565b9150509250925092565b6122ad81612185565b81146122b857600080fd5b50565b6000813590506122ca816122a4565b92915050565b6000602082840312156122e6576122e5611a69565b5b60006122f4848285016122bb565b91505092915050565b60006020828403121561231357612312611a69565b5b600082013567ffffffffffffffff81111561233157612330611a6e565b5b61233d84828501611f31565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061238d602083612346565b915061239882612357565b602082019050919050565b600060208201905081810360008301526123bc81612380565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060029050919050565b600081905092915050565b6000819050919050565b61244481611bb3565b82525050565b6000612456838361243b565b60208301905092915050565b6000602082019050919050565b6124788161241b565b6124828184612426565b925061248d82612431565b8060005b838110156124be5781516124a5878261244a565b96506124b083612462565b925050600181019050612491565b505050505050565b60006124d2838361246f565b60408301905092915050565b6000602082019050919050565b60006124f6826123ef565b61250081856123fa565b935061250b8361240b565b8060005b8381101561253c57815161252388826124c6565b975061252e836124de565b92505060018101905061250f565b5085935050505092915050565b600061255583836124eb565b905092915050565b6000602082019050919050565b6000612575826123c3565b61257f81856123ce565b935083602082028501612591856123df565b8060005b858110156125cd57848403895281516125ae8582612549565b94506125b98361255d565b925060208a01995050600181019050612595565b50829750879550505050505092915050565b600060208201905081810360008301526125f9818461256a565b905092915050565b60008151905061261081611a73565b92915050565b60006020828403121561262c5761262b611a69565b5b600061263a84828501612601565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126b957607f821691505b6020821081036126cc576126cb612672565b5b50919050565b6126db81611de6565b82525050565b6126ea816121c1565b82525050565b600060608201905061270560008301866126d2565b61271260208301856126d2565b61271f60408301846126e1565b949350505050565b60005b8381101561274557808201518184015260208101905061272a565b83811115612754576000848401525b50505050565b600061276d61276884611eaf565b611b15565b90508281526020810184848401111561278957612788611eaa565b5b612794848285612727565b509392505050565b600082601f8301126127b1576127b0611a9f565b5b81516127c184826020860161275a565b91505092915050565b6000602082840312156127e0576127df611a69565b5b600082015167ffffffffffffffff8111156127fe576127fd611a6e565b5b61280a8482850161279c565b91505092915050565b61281c816119a1565b82525050565b600081519050919050565b600061283882612822565b6128428185612346565b9350612852818560208601612727565b61285b81611aa4565b840191505092915050565b600060608201905061287b6000830186612813565b818103602083015261288d818561282d565b905061289c6040830184612813565b949350505050565b60006020820190506128b96000830184612813565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128f9826121c1565b9150612904836121c1565b92508260ff0382111561291a576129196128bf565b5b828201905092915050565b600081905092915050565b600061293b82612822565b6129458185612925565b9350612955818560208601612727565b80840191505092915050565b600061296d8284612930565b915081905092915050565b6000612983826119a1565b915061298e836119a1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129c3576129c26128bf565b5b828201905092915050565b60006129d9826119a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0b57612a0a6128bf565b5b600182019050919050565b6000612a21826121c1565b915060ff8203612a3457612a336128bf565b5b600182019050919050565b6000612a4a826119a1565b9150612a55836119a1565b925082821015612a6857612a676128bf565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612afe602683612346565b9150612b0982612aa2565b604082019050919050565b60006020820190508181036000830152612b2d81612af1565b9050919050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612b6a600e83612346565b9150612b7582612b34565b602082019050919050565b60006020820190508181036000830152612b9981612b5d565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612bd6601183612346565b9150612be182612ba0565b602082019050919050565b60006020820190508181036000830152612c0581612bc9565b9050919050565b60006020820190508181036000830152612c26818461282d565b90509291505056fea26469706673582212203dc764979cb99897b7379d474a3a522f1d8180d98a4f428ff95f1b770f0f0c7164736f6c634300080d0033",
  "libraries": {
    "AreaCalculation": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "GeohashUtils": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "Trigonometry": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToGeotree(string,uint256)": {
        "params": {
          "_data": "the uint data",
          "_geohash": "the geohash"
        }
      },
      "getAllGeoNFTs()": {
        "returns": {
          "geoNFTsArray": "Array of all registered token IDs"
        }
      },
      "getFromGeotree(string)": {
        "params": {
          "_geohash": "the geohash"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "queryGeoNFTsByLatLng(int64,int64,uint8)": {
        "params": {
          "_latitude": "Latitude",
          "_longitude": "Longitude",
          "_precision": "Precision level of the geohash searching"
        },
        "returns": {
          "_0": "geoNFTsArray Array of all registered token IDs"
        }
      },
      "registerGeoNFT(uint256,int64[2])": {
        "params": {
          "_centroid": "Centroid of the polygon passed as [latitude, longitude]",
          "_tokenId": "the index of the GeoNFT to register"
        }
      },
      "removeFromGeotree(string,uint256)": {
        "params": {
          "_data": "the uint data",
          "_geohash": "geohash"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregisterGeoNFT(uint256)": {
        "params": {
          "_tokenId": "the index of the GeoNFT to unregister"
        }
      },
      "updateGeoNFTTopology(uint256,int256[2][][],int64[2],string)": {
        "params": {
          "_coordinates": "Array of polygon rings",
          "_geojson": "Strigified geojson of the new topology",
          "_tokenId": "The index of the GeoNFT to update"
        }
      },
      "updateGeotree(string,string,uint256)": {
        "params": {
          "_data": "the uint data",
          "_formergeohash": "the former geohash",
          "_newgeohash": "the new geohash"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToGeotree(string,uint256)": {
        "notice": "Add uint data by geohash to its relative subtree"
      },
      "constructor": {
        "notice": "Set up the Spatial Data Registry and prepopulate initial values"
      },
      "getAllGeoNFTs()": {
        "notice": "Return all the GeoNFT ids in the registry"
      },
      "getFromGeotree(string)": {
        "notice": "Get a data by geohash"
      },
      "queryGeoNFTsByLatLng(int64,int64,uint8)": {
        "notice": "Query registry by latitude, longitude and geohash depth level"
      },
      "registerGeoNFT(uint256,int64[2])": {
        "notice": "Register a GeoNFT in the Spatial Data Registry"
      },
      "removeFromGeotree(string,uint256)": {
        "notice": "Remove data from node with specified geohash"
      },
      "unregisterGeoNFT(uint256)": {
        "notice": "Unregister a GeoNFT from the Spatial Data Registry"
      },
      "updateGeoNFTTopology(uint256,int256[2][][],int64[2],string)": {
        "notice": "Update the topology of the GeoNFT"
      },
      "updateGeotree(string,string,uint256)": {
        "notice": "Update geohash"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2691,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "geoNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GeoNFT)2667"
      },
      {
        "astId": 2697,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "tokenArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2706,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "geotree",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Node)2701_storage)"
      },
      {
        "astId": 2710,
        "contract": "contracts/SDRegistry.sol:SDRegistry",
        "label": "tokenGeohash",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(GeoNFT)2667": {
        "encoding": "inplace",
        "label": "contract GeoNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Node)2701_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SDRegistry.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)2701_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Node)2701_storage": {
        "encoding": "inplace",
        "label": "struct SDRegistry.Node",
        "members": [
          {
            "astId": 2700,
            "contract": "contracts/SDRegistry.sol:SDRegistry",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}