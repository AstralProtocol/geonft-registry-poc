{
  "address": "0xFD1D76b2944a0FE061A2753d184ee058363dB894",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256[2][]",
          "name": "_coordinates",
          "type": "int256[2][]"
        }
      ],
      "name": "isPolygon",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[2][][][]",
          "name": "_coordinates",
          "type": "int256[2][][][]"
        }
      ],
      "name": "multiPolygonArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[2][][]",
          "name": "_coordinates",
          "type": "int256[2][][]"
        }
      ],
      "name": "polygonArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x116aee41214bd34fd7a0775348a1b2fab53ae706462409252f44ea7cb5f1b924",
  "receipt": {
    "to": null,
    "from": "0xf73d7f5A890a131f12E4fB03E50277c49748Cf5E",
    "contractAddress": "0xFD1D76b2944a0FE061A2753d184ee058363dB894",
    "transactionIndex": 3,
    "gasUsed": "1121863",
    "logsBloom": "0x
    "blockHash": "0x7864b1b58b2fdeca8bd4c5f9eafbbc147b97a6f10b05c4a1ff35a0124ca15aad",
    "transactionHash": "0x116aee41214bd34fd7a0775348a1b2fab53ae706462409252f44ea7cb5f1b924",
    "logs": [],
    "blockNumber": 15164945,
    "cumulativeGasUsed": "1526492",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8028b60751616fe7bdfb60dcc3292f30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256[2][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][]\"}],\"name\":\"isPolygon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[2][][][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][][][]\"}],\"name\":\"multiPolygonArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[2][][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][][]\"}],\"name\":\"polygonArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isPolygon(int256[2][])\":{\"params\":{\"_coordinates\":\"Polygon ring\"},\"returns\":{\"_0\":\"Boolean whether the coordinates represents a closed polygon or not\"}},\"multiPolygonArea(int256[2][][][])\":{\"params\":{\"_coordinates\":\"Big Number integer coordinates of a multi polygon\"},\"returns\":{\"_0\":\"Area measured in square meters\"}},\"polygonArea(int256[2][][])\":{\"params\":{\"_coordinates\":\"Big Number integer coordinates of a single polygon - an array of rings\"},\"returns\":{\"_0\":\"Area measured in square meters\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isPolygon(int256[2][])\":{\"notice\":\"Checks to make sure first and last coordinates are the same\"},\"multiPolygonArea(int256[2][][][])\":{\"notice\":\"Calculate the area of a multi polygon coordinates\"},\"polygonArea(int256[2][][])\":{\"notice\":\"Calculate the area of a single polygon coordinates\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/AreaCalculation.sol\":\"AreaCalculation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/AreaCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport { Trigonometry } from \\\"../lib/Trigonometry.sol\\\";\\r\\n\\r\\n\\r\\nlibrary AreaCalculation {\\r\\n    // Multiplications exponents to avoid decimals\\r\\n    int256 private constant RAD_EXP = 1e9; // Radians exponent\\r\\n    int256 private constant SIN_EXP = 1e9; // Sine exponent\\r\\n    int256 private constant COORD_EXP = 1e9; // Coordinates exponent\\r\\n    int256 private constant PI_EXP = 1e9; // Pi exponent\\r\\n\\r\\n    // Other constants\\r\\n    int256 private constant PI = 3141592653;\\r\\n    int256 private constant EARTH_RADIUS = 6371008; // m\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the area of a multi polygon coordinates\\r\\n     * @param _coordinates Big Number integer coordinates of a multi polygon\\r\\n     * @return Area measured in square meters\\r\\n    */\\r\\n    function multiPolygonArea(int256[2][][][] memory _coordinates) public pure returns (uint256) {\\r\\n        uint256 total = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _coordinates.length; i++) {\\r\\n            total += polygonArea(_coordinates[i]);\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the area of a single polygon coordinates\\r\\n     * @param _coordinates Big Number integer coordinates of a single polygon - an array of rings\\r\\n     * @return Area measured in square meters\\r\\n    */\\r\\n    function polygonArea (int256[2][][] memory _coordinates) public pure returns (uint256) {\\r\\n        int256 total = 0;\\r\\n\\r\\n        if (_coordinates.length > 0) {\\r\\n            total += abs(ringArea(_coordinates[0]));\\r\\n\\r\\n            for (uint256 i = 1; i < _coordinates.length; i++) {\\r\\n                total -= abs(ringArea(_coordinates[i]));\\r\\n            }\\r\\n        }\\r\\n        return uint256(total);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the area of a coordinates ring (a polygon single part).\\r\\n        Obtained from Turf.js area function\\r\\n        (https://github.com/Turfjs/turf/blob/master/packages/turf-area/index.ts)\\r\\n     * @param _coordinates Big Number integer coordinates of a single polygon ring\\r\\n     * @return Area measured in square meters\\r\\n    */\\r\\n    function ringArea(int256[2][] memory _coordinates) private pure returns (int256) {\\r\\n        bool isValidPolygon = isPolygon(_coordinates);\\r\\n        require(isValidPolygon == true, \\\"The coordinates are invalid\\\");\\r\\n\\r\\n        uint256 coordsLength = _coordinates.length;\\r\\n        int256[2] memory p1;\\r\\n        int256[2] memory p2;\\r\\n        int256[2] memory p3;\\r\\n        uint256 lowerIndex;\\r\\n        uint256 middleIndex;\\r\\n        uint256 upperIndex;\\r\\n        int256 total = 0;\\r\\n\\r\\n        if (coordsLength > 2) {\\r\\n            for (uint256 i = 0; i < coordsLength; i++) {\\r\\n                if (i == coordsLength - 2) {\\r\\n                    // i = N-2\\r\\n                    lowerIndex = coordsLength - 2;\\r\\n                    middleIndex = coordsLength - 1;\\r\\n                    upperIndex = 0;\\r\\n                } else if (i == coordsLength - 1) {\\r\\n                    // i = N-1\\r\\n                    lowerIndex = coordsLength - 1;\\r\\n                    middleIndex = 0;\\r\\n                    upperIndex = 1;\\r\\n                } else {\\r\\n                    // i = 0 to N-3\\r\\n                    lowerIndex = i;\\r\\n                    middleIndex = i + 1;\\r\\n                    upperIndex = i + 2;\\r\\n                }\\r\\n                p1 = _coordinates[lowerIndex];\\r\\n                p2 = _coordinates[middleIndex];\\r\\n                p3 = _coordinates[upperIndex];\\r\\n\\r\\n                int256 v1 = nanoRad(p3[0]);\\r\\n                int256 v2 = nanoRad(p1[0]);\\r\\n                int256 v3 = nanoSin(p2[1]);\\r\\n\\r\\n                int256 subTotal = (v1 - v2) * v3;\\r\\n                total += subTotal;\\r\\n            }\\r\\n\\r\\n            // Must divide by all exponents applied before\\r\\n            total = total * EARTH_RADIUS**2 / (2 * RAD_EXP * SIN_EXP * PI_EXP * COORD_EXP);\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate nano radians (radians * 10^9) of a certain degree angle.\\r\\n     * @param _angle Degree angle (0-360\\u00ba)\\r\\n     * @return Nano radians\\r\\n    */\\r\\n    function nanoRad(int256 _angle) private pure returns (int256) {\\r\\n        return (_angle * PI * RAD_EXP) / (180);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate nano sine (sine * 10^9) of a certain degree angle.\\r\\n        The sine of an angle is given in a range [-1, 1]. The argument of the sine function \\r\\n        is usually radians, which exists in a range [0, 2\\u03c0 rad]. Since this is not possible in \\r\\n        Solidity, the following function returns the angle in 'nano' units (sine * 10^9). To do \\r\\n        so, the sine is calculated using integer values. Instead of using a circle divided \\r\\n        in 360 angle units (degrees), it assumes a circle divided in 1073741824 angle units (tAngle).\\r\\n        To convert from degrees to tAngle units we need to do the following:\\r\\n            tAngle = (degrees * 1073741824) / 360;\\r\\n        The returning value exists on a range [-2147483647, 2147483647] (signed 32-bit). Therefore, to \\r\\n        finally get the sine value, we need to divide the sin() function by 2147483647;\\r\\n     * @param _angle Degree angle (0-360\\u00ba)\\r\\n     * @return Nano sine\\r\\n    */\\r\\n    function nanoSin(int256 _angle) private pure returns (int256) {\\r\\n        int256 angleUnits = 1073741824;\\r\\n        int256 maxAngle = 2147483647;\\r\\n        int256 tAngle = (_angle * angleUnits) / (360 * COORD_EXP);\\r\\n        return Trigonometry.sin(uint256(tAngle)) * int(SIN_EXP) / maxAngle;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the absolute value of the input\\r\\n     * @param _value Input integer value\\r\\n     * @return Absolute input value\\r\\n    */\\r\\n    function abs(int256 _value) private pure returns (int256) {\\r\\n        return _value >= 0\\r\\n            ? _value\\r\\n            : -_value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks to make sure first and last coordinates are the same\\r\\n     * @param _coordinates Polygon ring\\r\\n     * @return Boolean whether the coordinates represents a closed polygon or not\\r\\n    */\\r\\n    function isPolygon (int256[2][] memory _coordinates) public pure returns (bool) {\\r\\n        uint256 length = _coordinates.length;\\r\\n        if (length > 2) {\\r\\n            // Coordinates of first coordinate of polygon\\r\\n            int256 firstLat = _coordinates[0][0];\\r\\n            int256 firstLon = _coordinates[0][1];\\r\\n            // Coordinates of last coordinate of polygon\\r\\n            int256 lastLat = _coordinates[length - 1][0];\\r\\n            int256 lastLon = _coordinates[length - 1][1];\\r\\n\\r\\n            return (firstLat == lastLat && firstLon == lastLon);\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3c6b30557a278c6b5067af1ce78b67e4c73d453fa2f1c9b59e59a378180b8a65\",\"license\":\"MIT\"},\"lib/Trigonometry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * SPDX-Licenses-Identifier: MIT\\r\\n * Basic trigonometry functions\\r\\n *\\r\\n * Based on the Trigonometry Library by Lefteris Karapetsas:\\r\\n * https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol\\r\\n * \\r\\n * This version implements a 32-bit lookup tables instead of a 16-bit. This\\r\\n * allows accurate topological operations on small areas with very close coordinates.\\r\\n *\\r\\n * @author Daniel Serrano\\r\\n */\\r\\n\\r\\nlibrary Trigonometry {\\r\\n\\r\\n    // Table index into the trigonometric table\\r\\n    uint constant INDEX_WIDTH = 8;\\r\\n    // Interpolation between successive entries in the tables\\r\\n    uint constant INTERP_WIDTH = 16;\\r\\n    uint constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\r\\n    uint constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\r\\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\\r\\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\\r\\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\\r\\n    uint constant SINE_TABLE_SIZE = 256;\\r\\n\\r\\n    // constant sine lookup table generated by gen_tables.py\\r\\n    // We have no other choice but this since constant arrays don't yet exist\\r\\n    uint8 constant ENTRY_BYTES = 4;\\r\\n    bytes constant SIN_TABLE = \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xc9\\\\x0f\\\\x88\\\\x01\\\\x92\\\\x1d\\\\x20\\\\x02\\\\x5b\\\\x26\\\\xd7\\\\x03\\\\x24\\\\x2a\\\\xbf\\\\x03\\\\xed\\\\x26\\\\xe6\\\\x04\\\\xb6\\\\x19\\\\x5d\\\\x05\\\\x7f\\\\x00\\\\x35\\\\x06\\\\x47\\\\xd9\\\\x7c\\\\x07\\\\x10\\\\xa3\\\\x45\\\\x07\\\\xd9\\\\x5b\\\\x9e\\\\x08\\\\xa2\\\\x00\\\\x9a\\\\x09\\\\x6a\\\\x90\\\\x49\\\\x0a\\\\x33\\\\x08\\\\xbc\\\\x0a\\\\xfb\\\\x68\\\\x05\\\\x0b\\\\xc3\\\\xac\\\\x35\\\\x0c\\\\x8b\\\\xd3\\\\x5e\\\\x0d\\\\x53\\\\xdb\\\\x92\\\\x0e\\\\x1b\\\\xc2\\\\xe4\\\\x0e\\\\xe3\\\\x87\\\\x66\\\\x0f\\\\xab\\\\x27\\\\x2b\\\\x10\\\\x72\\\\xa0\\\\x48\\\\x11\\\\x39\\\\xf0\\\\xcf\\\\x12\\\\x01\\\\x16\\\\xd5\\\\x12\\\\xc8\\\\x10\\\\x6e\\\\x13\\\\x8e\\\\xdb\\\\xb1\\\\x14\\\\x55\\\\x76\\\\xb1\\\\x15\\\\x1b\\\\xdf\\\\x85\\\\x15\\\\xe2\\\\x14\\\\x44\\\\x16\\\\xa8\\\\x13\\\\x05\\\\x17\\\\x6d\\\\xd9\\\\xde\\\\x18\\\\x33\\\\x66\\\\xe8\\\\x18\\\\xf8\\\\xb8\\\\x3c\\\\x19\\\\xbd\\\\xcb\\\\xf3\\\\x1a\\\\x82\\\\xa0\\\\x25\\\\x1b\\\\x47\\\\x32\\\\xef\\\\x1c\\\\x0b\\\\x82\\\\x6a\\\\x1c\\\\xcf\\\\x8c\\\\xb3\\\\x1d\\\\x93\\\\x4f\\\\xe5\\\\x1e\\\\x56\\\\xca\\\\x1e\\\\x1f\\\\x19\\\\xf9\\\\x7b\\\\x1f\\\\xdc\\\\xdc\\\\x1b\\\\x20\\\\x9f\\\\x70\\\\x1c\\\\x21\\\\x61\\\\xb3\\\\x9f\\\\x22\\\\x23\\\\xa4\\\\xc5\\\\x22\\\\xe5\\\\x41\\\\xaf\\\\x23\\\\xa6\\\\x88\\\\x7e\\\\x24\\\\x67\\\\x77\\\\x57\\\\x25\\\\x28\\\\x0c\\\\x5d\\\\x25\\\\xe8\\\\x45\\\\xb6\\\\x26\\\\xa8\\\\x21\\\\x85\\\\x27\\\\x67\\\\x9d\\\\xf4\\\\x28\\\\x26\\\\xb9\\\\x28\\\\x28\\\\xe5\\\\x71\\\\x4a\\\\x29\\\\xa3\\\\xc4\\\\x85\\\\x2a\\\\x61\\\\xb1\\\\x01\\\\x2b\\\\x1f\\\\x34\\\\xeb\\\\x2b\\\\xdc\\\\x4e\\\\x6f\\\\x2c\\\\x98\\\\xfb\\\\xba\\\\x2d\\\\x55\\\\x3a\\\\xfb\\\\x2e\\\\x11\\\\x0a\\\\x62\\\\x2e\\\\xcc\\\\x68\\\\x1e\\\\x2f\\\\x87\\\\x52\\\\x62\\\\x30\\\\x41\\\\xc7\\\\x60\\\\x30\\\\xfb\\\\xc5\\\\x4d\\\\x31\\\\xb5\\\\x4a\\\\x5d\\\\x32\\\\x6e\\\\x54\\\\xc7\\\\x33\\\\x26\\\\xe2\\\\xc2\\\\x33\\\\xde\\\\xf2\\\\x87\\\\x34\\\\x96\\\\x82\\\\x4f\\\\x35\\\\x4d\\\\x90\\\\x56\\\\x36\\\\x04\\\\x1a\\\\xd9\\\\x36\\\\xba\\\\x20\\\\x13\\\\x37\\\\x6f\\\\x9e\\\\x46\\\\x38\\\\x24\\\\x93\\\\xb0\\\\x38\\\\xd8\\\\xfe\\\\x93\\\\x39\\\\x8c\\\\xdd\\\\x32\\\\x3a\\\\x40\\\\x2d\\\\xd1\\\\x3a\\\\xf2\\\\xee\\\\xb7\\\\x3b\\\\xa5\\\\x1e\\\\x29\\\\x3c\\\\x56\\\\xba\\\\x70\\\\x3d\\\\x07\\\\xc1\\\\xd5\\\\x3d\\\\xb8\\\\x32\\\\xa5\\\\x3e\\\\x68\\\\x0b\\\\x2c\\\\x3f\\\\x17\\\\x49\\\\xb7\\\\x3f\\\\xc5\\\\xec\\\\x97\\\\x40\\\\x73\\\\xf2\\\\x1d\\\\x41\\\\x21\\\\x58\\\\x9a\\\\x41\\\\xce\\\\x1e\\\\x64\\\\x42\\\\x7a\\\\x41\\\\xd0\\\\x43\\\\x25\\\\xc1\\\\x35\\\\x43\\\\xd0\\\\x9a\\\\xec\\\\x44\\\\x7a\\\\xcd\\\\x50\\\\x45\\\\x24\\\\x56\\\\xbc\\\\x45\\\\xcd\\\\x35\\\\x8f\\\\x46\\\\x75\\\\x68\\\\x27\\\\x47\\\\x1c\\\\xec\\\\xe6\\\\x47\\\\xc3\\\\xc2\\\\x2e\\\\x48\\\\x69\\\\xe6\\\\x64\\\\x49\\\\x0f\\\\x57\\\\xee\\\\x49\\\\xb4\\\\x15\\\\x33\\\\x4a\\\\x58\\\\x1c\\\\x9d\\\\x4a\\\\xfb\\\\x6c\\\\x97\\\\x4b\\\\x9e\\\\x03\\\\x8f\\\\x4c\\\\x3f\\\\xdf\\\\xf3\\\\x4c\\\\xe1\\\\x00\\\\x34\\\\x4d\\\\x81\\\\x62\\\\xc3\\\\x4e\\\\x21\\\\x06\\\\x17\\\\x4e\\\\xbf\\\\xe8\\\\xa4\\\\x4f\\\\x5e\\\\x08\\\\xe2\\\\x4f\\\\xfb\\\\x65\\\\x4c\\\\x50\\\\x97\\\\xfc\\\\x5e\\\\x51\\\\x33\\\\xcc\\\\x94\\\\x51\\\\xce\\\\xd4\\\\x6e\\\\x52\\\\x69\\\\x12\\\\x6e\\\\x53\\\\x02\\\\x85\\\\x17\\\\x53\\\\x9b\\\\x2a\\\\xef\\\\x54\\\\x33\\\\x02\\\\x7d\\\\x54\\\\xca\\\\x0a\\\\x4a\\\\x55\\\\x60\\\\x40\\\\xe2\\\\x55\\\\xf5\\\\xa4\\\\xd2\\\\x56\\\\x8a\\\\x34\\\\xa9\\\\x57\\\\x1d\\\\xee\\\\xf9\\\\x57\\\\xb0\\\\xd2\\\\x55\\\\x58\\\\x42\\\\xdd\\\\x54\\\\x58\\\\xd4\\\\x0e\\\\x8c\\\\x59\\\\x64\\\\x64\\\\x97\\\\x59\\\\xf3\\\\xde\\\\x12\\\\x5a\\\\x82\\\\x79\\\\x99\\\\x5b\\\\x10\\\\x35\\\\xce\\\\x5b\\\\x9d\\\\x11\\\\x53\\\\x5c\\\\x29\\\\x0a\\\\xcc\\\\x5c\\\\xb4\\\\x20\\\\xdf\\\\x5d\\\\x3e\\\\x52\\\\x36\\\\x5d\\\\xc7\\\\x9d\\\\x7b\\\\x5e\\\\x50\\\\x01\\\\x5d\\\\x5e\\\\xd7\\\\x7c\\\\x89\\\\x5f\\\\x5e\\\\x0d\\\\xb2\\\\x5f\\\\xe3\\\\xb3\\\\x8d\\\\x60\\\\x68\\\\x6c\\\\xce\\\\x60\\\\xec\\\\x38\\\\x2f\\\\x61\\\\x6f\\\\x14\\\\x6b\\\\x61\\\\xf1\\\\x00\\\\x3e\\\\x62\\\\x71\\\\xfa\\\\x68\\\\x62\\\\xf2\\\\x01\\\\xac\\\\x63\\\\x71\\\\x14\\\\xcc\\\\x63\\\\xef\\\\x32\\\\x8f\\\\x64\\\\x6c\\\\x59\\\\xbf\\\\x64\\\\xe8\\\\x89\\\\x25\\\\x65\\\\x63\\\\xbf\\\\x91\\\\x65\\\\xdd\\\\xfb\\\\xd2\\\\x66\\\\x57\\\\x3c\\\\xbb\\\\x66\\\\xcf\\\\x81\\\\x1f\\\\x67\\\\x46\\\\xc7\\\\xd7\\\\x67\\\\xbd\\\\x0f\\\\xbc\\\\x68\\\\x32\\\\x57\\\\xaa\\\\x68\\\\xa6\\\\x9e\\\\x80\\\\x69\\\\x19\\\\xe3\\\\x1f\\\\x69\\\\x8c\\\\x24\\\\x6b\\\\x69\\\\xfd\\\\x61\\\\x4a\\\\x6a\\\\x6d\\\\x98\\\\xa3\\\\x6a\\\\xdc\\\\xc9\\\\x64\\\\x6b\\\\x4a\\\\xf2\\\\x78\\\\x6b\\\\xb8\\\\x12\\\\xd0\\\\x6c\\\\x24\\\\x29\\\\x5f\\\\x6c\\\\x8f\\\\x35\\\\x1b\\\\x6c\\\\xf9\\\\x34\\\\xfb\\\\x6d\\\\x62\\\\x27\\\\xf9\\\\x6d\\\\xca\\\\x0d\\\\x14\\\\x6e\\\\x30\\\\xe3\\\\x49\\\\x6e\\\\x96\\\\xa9\\\\x9c\\\\x6e\\\\xfb\\\\x5f\\\\x11\\\\x6f\\\\x5f\\\\x02\\\\xb1\\\\x6f\\\\xc1\\\\x93\\\\x84\\\\x70\\\\x23\\\\x10\\\\x99\\\\x70\\\\x83\\\\x78\\\\xfe\\\\x70\\\\xe2\\\\xcb\\\\xc5\\\\x71\\\\x41\\\\x08\\\\x04\\\\x71\\\\x9e\\\\x2c\\\\xd1\\\\x71\\\\xfa\\\\x39\\\\x48\\\\x72\\\\x55\\\\x2c\\\\x84\\\\x72\\\\xaf\\\\x05\\\\xa6\\\\x73\\\\x07\\\\xc3\\\\xcf\\\\x73\\\\x5f\\\\x66\\\\x25\\\\x73\\\\xb5\\\\xeb\\\\xd0\\\\x74\\\\x0b\\\\x53\\\\xfa\\\\x74\\\\x5f\\\\x9d\\\\xd0\\\\x74\\\\xb2\\\\xc8\\\\x83\\\\x75\\\\x04\\\\xd3\\\\x44\\\\x75\\\\x55\\\\xbd\\\\x4b\\\\x75\\\\xa5\\\\x85\\\\xce\\\\x75\\\\xf4\\\\x2c\\\\x0a\\\\x76\\\\x41\\\\xaf\\\\x3c\\\\x76\\\\x8e\\\\x0e\\\\xa5\\\\x76\\\\xd9\\\\x49\\\\x88\\\\x77\\\\x23\\\\x5f\\\\x2c\\\\x77\\\\x6c\\\\x4e\\\\xda\\\\x77\\\\xb4\\\\x17\\\\xdf\\\\x77\\\\xfa\\\\xb9\\\\x88\\\\x78\\\\x40\\\\x33\\\\x28\\\\x78\\\\x84\\\\x84\\\\x13\\\\x78\\\\xc7\\\\xab\\\\xa1\\\\x79\\\\x09\\\\xa9\\\\x2c\\\\x79\\\\x4a\\\\x7c\\\\x11\\\\x79\\\\x8a\\\\x23\\\\xb0\\\\x79\\\\xc8\\\\x9f\\\\x6d\\\\x7a\\\\x05\\\\xee\\\\xac\\\\x7a\\\\x42\\\\x10\\\\xd8\\\\x7a\\\\x7d\\\\x05\\\\x5a\\\\x7a\\\\xb6\\\\xcb\\\\xa3\\\\x7a\\\\xef\\\\x63\\\\x23\\\\x7b\\\\x26\\\\xcb\\\\x4e\\\\x7b\\\\x5d\\\\x03\\\\x9d\\\\x7b\\\\x92\\\\x0b\\\\x88\\\\x7b\\\\xc5\\\\xe2\\\\x8f\\\\x7b\\\\xf8\\\\x88\\\\x2f\\\\x7c\\\\x29\\\\xfb\\\\xed\\\\x7c\\\\x5a\\\\x3d\\\\x4f\\\\x7c\\\\x89\\\\x4b\\\\xdd\\\\x7c\\\\xb7\\\\x27\\\\x23\\\\x7c\\\\xe3\\\\xce\\\\xb1\\\\x7d\\\\x0f\\\\x42\\\\x17\\\\x7d\\\\x39\\\\x80\\\\xeb\\\\x7d\\\\x62\\\\x8a\\\\xc5\\\\x7d\\\\x8a\\\\x5f\\\\x3f\\\\x7d\\\\xb0\\\\xfd\\\\xf7\\\\x7d\\\\xd6\\\\x66\\\\x8e\\\\x7d\\\\xfa\\\\x98\\\\xa7\\\\x7e\\\\x1d\\\\x93\\\\xe9\\\\x7e\\\\x3f\\\\x57\\\\xfe\\\\x7e\\\\x5f\\\\xe4\\\\x92\\\\x7e\\\\x7f\\\\x39\\\\x56\\\\x7e\\\\x9d\\\\x55\\\\xfb\\\\x7e\\\\xba\\\\x3a\\\\x38\\\\x7e\\\\xd5\\\\xe5\\\\xc5\\\\x7e\\\\xf0\\\\x58\\\\x5f\\\\x7f\\\\x09\\\\x91\\\\xc3\\\\x7f\\\\x21\\\\x91\\\\xb3\\\\x7f\\\\x38\\\\x57\\\\xf5\\\\x7f\\\\x4d\\\\xe4\\\\x50\\\\x7f\\\\x62\\\\x36\\\\x8e\\\\x7f\\\\x75\\\\x4e\\\\x7f\\\\x7f\\\\x87\\\\x2b\\\\xf2\\\\x7f\\\\x97\\\\xce\\\\xbc\\\\x7f\\\\xa7\\\\x36\\\\xb3\\\\x7f\\\\xb5\\\\x63\\\\xb2\\\\x7f\\\\xc2\\\\x55\\\\x95\\\\x7f\\\\xce\\\\x0c\\\\x3d\\\\x7f\\\\xd8\\\\x87\\\\x8d\\\\x7f\\\\xe1\\\\xc7\\\\x6a\\\\x7f\\\\xe9\\\\xcb\\\\xbf\\\\x7f\\\\xf0\\\\x94\\\\x77\\\\x7f\\\\xf6\\\\x21\\\\x81\\\\x7f\\\\xfa\\\\x72\\\\xd0\\\\x7f\\\\xfd\\\\x88\\\\x59\\\\x7f\\\\xff\\\\x62\\\\x15\\\\x7f\\\\xff\\\\xff\\\\xff\\\";\\r\\n    /**\\r\\n     * Convenience function to apply a mask on an integer to extract a certain\\r\\n     * number of bits. Using exponents since solidity still does not support\\r\\n     * shifting.\\r\\n     *\\r\\n     * @param _value The integer whose bits we want to get\\r\\n     * @param _width The width of the bits (in bits) we want to extract\\r\\n     * @param _offset The offset of the bits (in bits) we want to extract\\r\\n     * @return An integer containing _width bits of _value starting at the\\r\\n     *         _offset bit\\r\\n     */\\r\\n    function bits(uint _value, uint _width, uint _offset) pure internal returns (uint) {\\r\\n        return (_value / (2 ** _offset)) & (((2 ** _width)) - 1);\\r\\n    }\\r\\n\\r\\n    function sinTableLookup(uint index) pure internal returns (uint32) {\\r\\n        bytes memory table = SIN_TABLE;\\r\\n        uint offset = (index + 1) * ENTRY_BYTES;\\r\\n        uint32 trigint_value;\\r\\n        assembly {\\r\\n            trigint_value := mload(add(table, offset))\\r\\n        }\\r\\n\\r\\n        return trigint_value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return the sine of an integer approximated angle as a signed 16-bit\\r\\n     * integer.\\r\\n     *\\r\\n     * @param _angle A 30-bit angle. This divides the circle into 1073741824\\r\\n     *     angle units, instead of the standard 360 degrees.\\r\\n     * @return The sine result as a number in the range -2147483647 to 2147483647.\\r\\n     */\\r\\n    function sin(uint256 _angle) public pure returns (int) {\\r\\n        uint interp = bits(_angle, INTERP_WIDTH, INTERP_OFFSET);\\r\\n        uint index = bits(_angle, INDEX_WIDTH, INDEX_OFFSET);\\r\\n\\r\\n        bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\r\\n        bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\r\\n\\r\\n        if (!is_odd_quadrant) {\\r\\n            index = SINE_TABLE_SIZE - 1 - index;\\r\\n        }\\r\\n\\r\\n        uint x1 = sinTableLookup(index);\\r\\n        uint x2 = sinTableLookup(index + 1);\\r\\n        uint approximation = ((x2 - x1) * interp) / (2 ** INTERP_WIDTH);\\r\\n\\r\\n        int sine;\\r\\n        if (is_odd_quadrant) {\\r\\n            sine = int(x1) + int(approximation);\\r\\n        } else {\\r\\n            sine = int(x2) - int(approximation);\\r\\n        }\\r\\n\\r\\n        if (is_negative_quadrant) {\\r\\n            sine *= -1;\\r\\n        }\\r\\n\\r\\n        return sine;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf78980fa212a4a6a4d9d8e74fe582c7e625f1471ec8f0b5510343cc3de0887e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806323b2230514610050578063d818e7c414610080578063defe2c1c146100b0575b600080fd5b61006a60048036038101906100659190610b17565b6100e0565b6040516100779190610b79565b60405180910390f35b61009a60048036038101906100959190610b94565b610140565b6040516100a79190610bf8565b60405180910390f35b6100ca60048036038101906100c59190610c13565b61026b565b6040516100d79190610b79565b60405180910390f35b6000806000905060005b83518110156101365761011684828151811061010957610108610c5c565b5b602002602001015161026b565b826101219190610cba565b9150808061012e90610d10565b9150506100ea565b5080915050919050565b6000808251905060028111156102605760008360008151811061016657610165610c5c565b5b602002602001015160006002811061018157610180610c5c565b5b6020020151905060008460008151811061019e5761019d610c5c565b5b60200260200101516001600281106101b9576101b8610c5c565b5b602002015190506000856001856101d09190610d58565b815181106101e1576101e0610c5c565b5b60200260200101516000600281106101fc576101fb610c5c565b5b602002015190506000866001866102139190610d58565b8151811061022457610223610c5c565b5b602002602001015160016002811061023f5761023e610c5c565b5b60200201519050818414801561025457508083145b95505050505050610266565b60009150505b919050565b60008060009050600083511115610312576102a86102a38460008151811061029657610295610c5c565b5b602002602001015161031b565b6105ae565b816102b39190610d8c565b90506000600190505b8351811015610310576102f06102eb8583815181106102de576102dd610c5c565b5b602002602001015161031b565b6105ae565b826102fb9190610e20565b9150808061030890610d10565b9150506102bc565b505b80915050919050565b60008061032783610140565b90506001151581151514610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790610f11565b60405180910390fd5b60008351905061037e6106df565b6103866106df565b61038e6106df565b60008060008060009050600288111561059d5760005b8881101561053e576002896103b99190610d58565b81036103e6576002896103cc9190610d58565b94506001896103db9190610d58565b935060009250610438565b6001896103f39190610d58565b8103610415576001896104069190610d58565b94506000935060019250610437565b8094506001816104259190610cba565b93506002816104349190610cba565b92505b5b8b858151811061044b5761044a610c5c565b5b602002602001015197508b848151811061046857610467610c5c565b5b602002602001015196508b838151811061048557610484610c5c565b5b6020026020010151955060006104b2876000600281106104a8576104a7610c5c565b5b60200201516105d0565b905060006104d78a6000600281106104cd576104cc610c5c565b5b60200201516105d0565b905060006104fc8a6001600281106104f2576104f1610c5c565b5b6020020151610604565b9050600081838561050d9190610e20565b6105179190610f31565b905080866105259190610d8c565b955050505050808061053690610d10565b9150506103a4565b50633b9aca0080633b9aca008060026105579190610f31565b6105619190610f31565b61056b9190610f31565b6105759190610f31565b6002626136c061058591906111a4565b826105909190610f31565b61059a919061123f565b90505b809950505050505050505050919050565b6000808212156105c757816105c2906112a9565b6105c9565b815b9050919050565b600060b4633b9aca0063bb40e64d846105e99190610f31565b6105f39190610f31565b6105fd919061123f565b9050919050565b600080634000000090506000637fffffff90506000633b9aca0061016861062b9190610f31565b83866106379190610f31565b610641919061123f565b905081633b9aca0073__$ace459064953959b6034b32bdfe6b7b52f$__63cb5cc109846040518263ffffffff1660e01b81526004016106809190610b79565b602060405180830381865af415801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190611306565b6106cb9190610f31565b6106d5919061123f565b9350505050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107638261071a565b810181811067ffffffffffffffff821117156107825761078161072b565b5b80604052505050565b6000610795610701565b90506107a1828261075a565b919050565b600067ffffffffffffffff8211156107c1576107c061072b565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156107f2576107f161072b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561081e5761081d61072b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561084a5761084961072b565b5b602082029050919050565b6000819050919050565b61086881610855565b811461087357600080fd5b50565b6000813590506108858161085f565b92915050565b600061089e6108998461082f565b61078b565b905080602084028301858111156108b8576108b76107d2565b5b835b818110156108e157806108cd8882610876565b8452602084019350506020810190506108ba565b5050509392505050565b600082601f830112610900576108ff610715565b5b600261090d84828561088b565b91505092915050565b600061092961092484610803565b61078b565b9050808382526020820190506040840283018581111561094c5761094b6107d2565b5b835b81811015610975578061096188826108eb565b84526020840193505060408101905061094e565b5050509392505050565b600082601f83011261099457610993610715565b5b81356109a4848260208601610916565b91505092915050565b60006109c06109bb846107d7565b61078b565b905080838252602082019050602084028301858111156109e3576109e26107d2565b5b835b81811015610a2a57803567ffffffffffffffff811115610a0857610a07610715565b5b808601610a15898261097f565b855260208501945050506020810190506109e5565b5050509392505050565b600082601f830112610a4957610a48610715565b5b8135610a598482602086016109ad565b91505092915050565b6000610a75610a70846107a6565b61078b565b90508083825260208201905060208402830185811115610a9857610a976107d2565b5b835b81811015610adf57803567ffffffffffffffff811115610abd57610abc610715565b5b808601610aca8982610a34565b85526020850194505050602081019050610a9a565b5050509392505050565b600082601f830112610afe57610afd610715565b5b8135610b0e848260208601610a62565b91505092915050565b600060208284031215610b2d57610b2c61070b565b5b600082013567ffffffffffffffff811115610b4b57610b4a610710565b5b610b5784828501610ae9565b91505092915050565b6000819050919050565b610b7381610b60565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b600060208284031215610baa57610ba961070b565b5b600082013567ffffffffffffffff811115610bc857610bc7610710565b5b610bd48482850161097f565b91505092915050565b60008115159050919050565b610bf281610bdd565b82525050565b6000602082019050610c0d6000830184610be9565b92915050565b600060208284031215610c2957610c2861070b565b5b600082013567ffffffffffffffff811115610c4757610c46610710565b5b610c5384828501610a34565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc582610b60565b9150610cd083610b60565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0557610d04610c8b565b5b828201905092915050565b6000610d1b82610b60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4d57610d4c610c8b565b5b600182019050919050565b6000610d6382610b60565b9150610d6e83610b60565b925082821015610d8157610d80610c8b565b5b828203905092915050565b6000610d9782610855565b9150610da283610855565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610ddd57610ddc610c8b565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610e1557610e14610c8b565b5b828201905092915050565b6000610e2b82610855565b9150610e3683610855565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610e7157610e70610c8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610ea957610ea8610c8b565b5b828203905092915050565b600082825260208201905092915050565b7f54686520636f6f7264696e617465732061726520696e76616c69640000000000600082015250565b6000610efb601b83610eb4565b9150610f0682610ec5565b602082019050919050565b60006020820190508181036000830152610f2a81610eee565b9050919050565b6000610f3c82610855565b9150610f4783610855565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f8657610f85610c8b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fc357610fc2610c8b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561100057610fff610c8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561103d5761103c610c8b565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b600185111561109f5780860481111561107b5761107a610c8b565b5b600185161561108a5780820291505b808102905061109885611048565b945061105f565b94509492505050565b600082600081146110c057600181146110ca576110d3565b600191505061118f565b8291505061118f565b50816110e2576000905061118f565b6001905060008213600181146110ff57600081146111175761112b565b82860483111561111257611111610c8b565b5b61112b565b82860583121561112a57611129610c8b565b5b5b506001831615611139578190505b818202915061114783611048565b925061115585848484611055565b92509050818504811160008213161561117157611170610c8b565b5b818405811260008212161561118957611188610c8b565b5b81810290505b949350505050565b600060ff82169050919050565b60006111af82610855565b91506111ba83611197565b92506112087f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f800000000000000000000000000000000000000000000000000000000000000085856110a8565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061124a82610855565b915061125583610855565b92508261126557611264611210565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561129e5761129d610c8b565b5b828205905092915050565b60006112b482610855565b91507f800000000000000000000000000000000000000000000000000000000000000082036112e6576112e5610c8b565b5b816000039050919050565b6000815190506113008161085f565b92915050565b60006020828403121561131c5761131b61070b565b5b600061132a848285016112f1565b9150509291505056fea2646970667358221220c7a3886aa4c70d1c482a4bf3d4a93b5cb4dfb1ac7dd05b6b84f528efdce47a0864736f6c634300080d0033",
  "libraries": {
    "Trigonometry": "0x1429127E953939f2F468153154a763190179580b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isPolygon(int256[2][])": {
        "params": {
          "_coordinates": "Polygon ring"
        },
        "returns": {
          "_0": "Boolean whether the coordinates represents a closed polygon or not"
        }
      },
      "multiPolygonArea(int256[2][][][])": {
        "params": {
          "_coordinates": "Big Number integer coordinates of a multi polygon"
        },
        "returns": {
          "_0": "Area measured in square meters"
        }
      },
      "polygonArea(int256[2][][])": {
        "params": {
          "_coordinates": "Big Number integer coordinates of a single polygon - an array of rings"
        },
        "returns": {
          "_0": "Area measured in square meters"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isPolygon(int256[2][])": {
        "notice": "Checks to make sure first and last coordinates are the same"
      },
      "multiPolygonArea(int256[2][][][])": {
        "notice": "Calculate the area of a multi polygon coordinates"
      },
      "polygonArea(int256[2][][])": {
        "notice": "Calculate the area of a single polygon coordinates"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}